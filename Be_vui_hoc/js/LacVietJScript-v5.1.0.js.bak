var stage;
var curentPage;
var g_iCurrentPage;
var m_pgObjCaller;
var KeyCode;
var folder_Resource = 'Resource';
var styteView = "Nor";//Hor,Ver
var m_pointDown = {};
var url = window.location.pathname;
var _global_lenSound=1000; //default
buzz.defaults.formats = ['mp3'];
buzz.defaults.preload = 'metadata';
var m_soundPlaying = new buzz.sound("/Images/abc");
var m_EndPos;
var m_StartPos;
var imageData = null;
function getUrlVars() {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}
function InitLacVietScript() {
    window.addEventListener("keydown", doKeyDown, true);
    window.addEventListener("keypress", doKeyPress, true);
    function disableBackButton() {
        window.history.forward();
    }
    window.onload = disableBackButton();
    //-------tinh scale------------//
    var wclient = document.getElementById("Doc").clientWidth;
    wclient = wclient * 98 / 100;
    var dScaleX = wclient / stage.width();
    m_dZoomScale = dScaleX;
    stage.width(stage.width() * m_dZoomScale);
    stage.height(stage.height() * m_dZoomScale);
    //--------26/08/2017-----------//
     var layers = stage.children;
     g_iCurrentPage = 0;    
     for (var n = 0; n < layers.length; n++)
     {
             //quangnd17 update 26.08/2017
             layers[n].y(layers[n].y() * m_dZoomScale);
             layers[n].scale({ x: m_dZoomScale, y: m_dZoomScale });      
             if (styteView != "Nor" || n === 0) {
                 curentPage = layers[n];
                 layers[n].show();
                 config = layers[n].getInitConfig();
                 eval(config.callback);                 
             }
             else {
                 layers[n].hide();
             }
             //end udate
           
             // Setcur
             var listObject = layers[n].children;
             for (var j = 0; j < listObject.length; j++)
             {
                var a_object = listObject[j];
                if (typeof a_object.eventListeners.mouseup != 'undefined' || typeof a_object.eventListeners.mousedown != 'undefined')
                {
                    SetCursor(layers[n].getName(), a_object.getName(), "pointer");
                }
                 // Tim trong group 2018/01/31
                if(a_object.children)
                {
                    var objOfGroup = a_object.children;
                    for (var i = 0; i < objOfGroup.length; i++)
                        if (typeof objOfGroup[i].eventListeners.mouseup != 'undefined' || typeof objOfGroup[i].eventListeners.mousedown != 'undefined') {
                            SetCursor(layers[n].getName(), objOfGroup[i].getName(), "pointer");
                        }
                }
             }
             layers[n].draw();
         }
     curentPage.on("mousedown", MouseDown);
     if (!responsiveVoice.voiceSupport) {
         alert("không hỗ trợ giọng đọc");
     }
    };

  function doKeyPress(evt) {
        if (m_pgObjCaller != null && m_pgObjCaller.nodeType === 'Shape' && m_pgObjCaller.readonly) {
            var key = evt.keycode || evt.which;
            if (m_pgObjCaller.CursorIndex == -1)
             m_pgObjCaller.setText(String.fromCharCode(key)+m_pgObjCaller.getText());
             else
            m_pgObjCaller.setText(m_pgObjCaller.getText() + String.fromCharCode(key));
            InvalidateObj("", "");
        }
        return false;
    }
    function doKeyDown(evt) {
       KeyCode = (evt.keyCode ? evt.keyCode : evt.which);
       
         if (KeyCode == 8 && m_pgObjCaller != null && m_pgObjCaller.nodeType === 'Shape' && m_pgObjCaller.readonly) 
         {
             var myString = m_pgObjCaller.getText();
             myString=myString.substring(0, myString.length - 1);
             m_pgObjCaller.setText(myString);
             InvalidateObj("", "");
             event.stopPropagation();
             evt.preventDefault();
             return true;
         }
         if (KeyCode == 46 || KeyCode == 37 || KeyCode == 38 || KeyCode == 39 || KeyCode == 40) {//, Disable hotkey->,<-,|,|
             event.stopPropagation();
             evt.preventDefault();
         }
     var  strOfFunction = curentPage.name() + "_OnKeyDown";
     if (typeof window[strOfFunction] === "function") {
         window[strOfFunction]();
     }
 }
 function MouseDown(evt) {
     m_pointDown.x = evt.x;
     m_pointDown.y = evt.y;
 }
 var m_dZoomScale = 1;
 function detectmob() {
     if (navigator.userAgent.match(/Android/i)
 || navigator.userAgent.match(/webOS/i)
 || navigator.userAgent.match(/iPhone/i)
 || navigator.userAgent.match(/iPad/i)
 || navigator.userAgent.match(/iPod/i)
 || navigator.userAgent.match(/BlackBerry/i)
 || navigator.userAgent.match(/Windows Phone/i)
 ) {
         return true;
     }
     else {
         return false;
     }
 }
 function removeFlashMarkup(pageName, objname) {
     var f = document.getElementById(objname);
     if (f != null)
         document.body.removeChild(f);
 }
 function createFlashMarkup(name, left, top , width, height, uri, pageShow) {
   
         var embed = document.createElement('embed');
         embed.setAttribute('id', name);
         embed.setAttribute('width', width * m_dZoomScale);
         embed.setAttribute('height', height * m_dZoomScale);

         var index_ = uri.indexOf('/');
     //   uri = uri.insert(index_ + 1, ogirin_name);
         left = left * m_dZoomScale + document.getElementById('Doc').offsetLeft;
         top = top * m_dZoomScale + document.getElementById('Doc').offsetTop;
         
        
         embed.setAttribute('src', folder_Resource + "/" + uri);
         embed.setAttribute('type', "application/x-shockwave-flash");
        // Fix date 12/02/2018
         var style = "position: absolute; left: {0}px; top: {1}px; width: {2}px; height: {3}px;".format(left , top , width * m_dZoomScale, height * m_dZoomScale);
         embed.setAttribute('style', style);
         document.getElementById("Doc").appendChild(embed);
//         document.body.appendChild(embed);
        // End Fix
   //  var div = document.getElementById(replaceid);
    // document.getElementsByTagName('body')[0].replaceChild(embed, div);
 
 }
 String.prototype.insert = function (index, string) {
     if (index > 0)
         return this.substring(0, index) + string + this.substring(index, this.length);
     else
         return string + this;
 };

 function CreText(objectName, x, y, w, h, text, fillNor, fillOver, fontColorN, fontColorV, fillImage, fontSize, fontName,
     /*fontFormat*/fontStyle, alignH, alignV, t_shape, rotate, posX, posY, lineWidth, lineColor, ColorEnd, BrushType, ModeFill, ColorShowdown, XShowdownText, YShowdownText, BlurShowdown, strokeText, XShowdownRect, YShowdownRect, ColorShowdownRect, padding, lineheight) {
     var comnfig = {};
     if (isNaN(objectName.toString().substring(0, 1)) == false) objectName = "_" + objectName;  //khong co object mang ten so
     comnfig.name = objectName;
     comnfig.x = x;
     comnfig.y = y;
     comnfig.width = w;
     comnfig.height = h;
     comnfig.text = text;
     switch (BrushType) {
         case "0": //BrushTypeSolidColor
             {
                 comnfig.fill = fillNor;
                 comnfig.fillPriority = 'color';
                 break;
             }
         case "2": //ImageFill
             {
                 fillImage = fillImage.replace(/[*:?<>"|\/]/ig, '');
                 var n = fillImage.indexOf("/");
                 if (n > 0 || fillImage === "")
                     break;
                 fillImage = folder_Resource + "/" + fillImage;
                 var m_image = new Image();
                 m_image.crossOrigin = "anonymous";
                 comnfig.fillPriority = 'pattern';
                 m_image.onload = function () {      
                     if (ModeFill == 0) {
                         objxxxx.fillPatternRepeat('no-repeat');
                         //2018/01/17 fix SetRsc loaded
                         if (objxxxx.fillPatternScaleX() === 1 && objxxxx.fillPatternScaleY() === 1) {
                             var dSX = 1, dSY = 1;
                             dSX = w / this.width;
                             dSY = h / this.height;
                             var m_Scale = Math.min(dSX, dSY);
                             wd = this.width * m_Scale;
                             wh = this.height * m_Scale;
                             objxxxx.fillPatternOffset({ x: -1 * (w - wd) * m_dZoomScale, y: -1 * (h - wh) * m_dZoomScale });
                             objxxxx.fillPatternScale({ x: m_Scale, y: m_Scale });
                         }
                         objxxxx.setAttr("fillMode", "center");
                     }
                     else if (ModeFill == 1) {
                         objxxxx.fillPatternRepeat('repeat');
                         objxxxx.setAttr("fillMode", "title");
                     }
                     else if (ModeFill == 2) {//stress
                         objxxxx.fillPatternRepeat('no-repeat');
                         objxxxx.fillPatternScale({ x: w / m_image.width, y: h / m_image.height });
                         objxxxx.setAttr("fillMode", "stress");
                     }
                     stage.draw();
                 };
                 m_image.onerror = function () {
                     this.src = fillImage.substring(0, fillImage.lastIndexOf('.')) + ".PNG";
                     this.onerror = function () {
                         this.src = fillImage.substring(0, fillImage.lastIndexOf('.')) + ".JPG";
                         this.onerror = function () {
                             this.src = fillImage.substring(0, fillImage.lastIndexOf('.')) + ".GIF";
                             this.onerror = function () {
                                 Message("Image not found: " + fillImage);
                                 comnfig.fill = fillNor;
                                 return;
                             };
                         };
                     };
                 };
                 m_image.src = fillImage;
                 comnfig.fill = {
                     fillPatternImage: m_image,
                     fillPatternOffset: { x: 0, y: 0 },
                     repeat: 'no-repeat'
                 }
                 comnfig.fillPatternImage = m_image;
             
                 break;
             }
         case "3": //fill Center
             {
                 comnfig.fillPriority = 'radial-gradient';
                 comnfig.fillRadialGradientStartPoint = { x: w / 2,y:h / 2};
                 comnfig.fillRadialGradientEndPoint =  { x: w / 2,y:h / 2};
                 comnfig.fillRadialGradientColorStops = [0, ColorEnd, 1, fillNor];
                 comnfig.fillRadialGradientEndRadius = (w + h) / 2;
                 break;
             }
         case "4": // BrushTypeLinearGradient
             {
                 //comnfig.fillLinearGradientStartPoint = {x: w / 2,y: 0};
                 //comnfig.fillLinearGradientEndPoint ={x: w / 2,y: h};
                 //comnfig.fillLinearGradientColorStops = [0.05, fillNor, 0.5, ColorEnd, 0.95, fillNor];
                 comnfig.fillLinearGradientStartPoint = {x: 0,y: h/2};
                 comnfig.fillLinearGradientEndPoint ={x: w ,y: h/2};
                 comnfig.fillLinearGradientColorStops = [0, fillNor, 1, ColorEnd];
                 comnfig.fillPriority = 'linear-gradient';
                 break;
             }
     }
     //    RGB
     comnfig.textFill = fontColorN;
  
     comnfig.fontSize = fontSize * 0.8;
  
     comnfig.fontFamily = fontName;
     comnfig.fontStyle = fontStyle;
     comnfig.align = alignH;
  
     if (rotate != 0) {
         comnfig.offset = {x:w/2, y:h/2};
         comnfig.x = x + w/2;
         comnfig.y = y + h/2;
         comnfig.rotation = rotate;
     }

     comnfig.stroke = lineColor;
     if (lineWidth == 0) lineWidth = 0.0001;
     comnfig.strokeWidth = lineWidth / 2;
     comnfig.textStroke = ColorShowdown;
     if (strokeText == 0) strokeText = 0.0001;
     comnfig.textStrokeWidth = strokeText;

     if (typeof padding != 'undefined')
         comnfig.padding = padding;
     if (typeof lineheight != 'undefined')
         comnfig.lineHeight = lineheight;
     //    comnfig.offset = [0, 0];
     //name.m_XShowdownText = XShowdownText;
     //name.m_YShowdownText = YShowdownText;
     comnfig.verticalAlign = alignV;
     comnfig.shadow = {
         color: ColorShowdownRect,
         blur: BlurShowdown,
         offset: [XShowdownRect, YShowdownRect],
         alpha: 0.5
     };

     switch (t_shape) {
         case 0:
             {
                 if (posX == posY) { posX = 0; posY = 0; }
                 comnfig.shapeType = 'Rect';
                 comnfig.sides = posX;
                 comnfig.sidesY = posY;
                 break;
             }
         case 1:
             {
                 if (posX == posY) { posX = 0; posY = 0; }
                 comnfig.shapeType = 'Ellipse';
                 comnfig.sides = posX;
                 if (posY <= 0) posY = 360;
                 comnfig.sidesY = posY;
                 break;
             }
         case 2:
             {
                 if (posX == posY) { posX = 0; posY = 0; }
                 comnfig.shapeType = 'Circle';
                 comnfig.sides = posX;
                 if (posY <= 0) posY = 360;
                 comnfig.sidesY = posY;
                 break;
             }
         case 3:
             {
                 comnfig.shapeType = 'RoundRect';
                 comnfig.cornerRadius = posX * 45 / 100;
                 break;
             }
         case 4:
             {
                 comnfig.shapeType = 'Triangula';
                 comnfig.sides = posX;
                 if (posY < 0) posY = 0;
                 comnfig.sidesY = posY;
                 break;
             }
         case 5:
             {
                 comnfig.shapeType = 'Lozenge';
                 break;
             }
         case 6:
             {
                 comnfig.shapeType = 'Parallelogram';
                 comnfig.sides = posX;
                 break;
             }
         case 7:
             {
                 comnfig.shapeType = 'Trapezium';
                 comnfig.sides = posX;
                 comnfig.sidesY = posY;
                 break;
             }
         case 8:
             {
                 comnfig.shapeType = 'Pentagon';
                 comnfig.sides = 5;
                 comnfig.sides = posX;
                 comnfig.sidesY = posY;
                 break;
             }
         case 9:
             {
                 comnfig.shapeType = 'RegularPolygon';
                 comnfig.sides = 8;
                 r = w / 2;
                 if (r > h / 2) r = h / 2;
                 comnfig.radius = r;
                 break;
             }
         case 10:
             {
                 comnfig.shapeType = 'RegularPolygon';
                 comnfig.sides = 6;
                 r = w / 2;
                 if (r > h / 2) r = h / 2;
                 comnfig.radius = r;
                 break;
             }
         case 11:
             {
                 comnfig.shapeType = 'altp';
                 comnfig.sides = posX;
                 r = w / 2;
                 if (r > h / 2) r = h / 2;
                 comnfig.radius = r;
                 break;
             }
         case 12:
             {
                 comnfig.shapeType = 'arrows';
                 comnfig.sides = posX;
                 comnfig.sidesY = posY;
                 break;
             }
     }
     var objxxxx = new Kinetic.Text(comnfig);
     return objxxxx;
     
 };
    function wrapText(context, text, x, y, maxWidth, lineHeight) {
        var words = text.split(" ");
        var line = "";
        for (var n = 0; n < words.length; n++) {
            var testLine = line + words[n] + " ";
            var metrics = context.measureText(testLine);
            var testWidth = metrics.width;
            if (testWidth > maxWidth) {
                context.fillText(line, x, y);
                line = words[n] + " ";
                y += lineHeight;
            }
            else {
                line = testLine;
            }
        }
        context.fillText(line, x, y);
    }

    function drawEllipse(ctx, x, y, w, h, posX, posY) 
    {
       if (typeof posX == 'undefined') { posX = 0; posY = 0; }
        if (posY <= 0) posY = 360;
      //var kappa = .5522848;
      var kappa = 1;
      ox = (w / 2) * kappa, // control point offset horizontal
      oy = (h / 2) * kappa, // control point offset vertical
      xe = x + w,           // x-end
      ye = y + h,           // y-end
      xm = x + w / 2,       // x-middle
      ym = y + h / 2;       // y-middle
      var startArc = posX * Math.PI / 180;
      var endArc = posY * Math.PI / 180;
      var r = Math.min(ox, oy);
      if (r != 0) {
          if (ox !== oy) {
              scaleX = ox / r;
              scaleY = oy / r;
              ctx.translate(ox, oy);
              ctx.scale(scaleX, scaleY);
          }
          ctx.arc(0, 0, r, startArc, endArc, true);
      }
    }
    /// FindShape Đã OK hàm này không có trong 	CActionManager	
    window.requestAnimFrame = (function (callback) { // khoong biet ham nay de lam gi??
        return window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.oRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function (callback) {
        window.setTimeout(callback, 1000 / 60);
    };
    })();
//
function FindShape(PageName, nameShape) {
    var p_Name = null;
    var o_Object = null;
    //tim page
    if (PageName === "") {
        if (m_pgObjCaller != null) {
            curentPage = m_pgObjCaller.parent;
            while(curentPage.nodeType != 'Layer')// is Group
                curentPage=curentPage.parent;
            p_Name = curentPage;
        }
        else p_Name = curentPage;
    }
    else {
        var layers = stage.children;
        for (var n = 0; n < layers.length; n++) {
            if (layers[n].getName() == PageName) {
                p_Name = layers[n];
                break;
            }
        }
    }
    //tim object
   
    if (typeof nameShape == 'undefined' || nameShape === "") {
        return m_pgObjCaller;
    }
    else {
        if (p_Name != null) {
            if (isNaN(leftStr(nameShape, 1)) == false)
                nameShape = "_" + nameShape;
            nameShape = nameShape.toString();
            var listObj = p_Name.children;
            for (n = 0; n < listObj.length; n++) {
                if (listObj[n].getName().toLowerCase() == nameShape.toString().toLowerCase()) {
                   return listObj[n];
                }
                if (listObj[n].nodeType == "Group" && listObj[n].children)
                {
                    for (j = 0; j < listObj[n].children.length; j++)
                     {
                         if (listObj[n].children[j].getName().toLowerCase() == nameShape.toString().toLowerCase())
                             return listObj[n].children[j];
                    }
                } 
            }
        }
    }
    return o_Object;
};
// tim page name
function FindPage(PageName) {
    var p_Page = null;   
    if (PageName === "")
        p_Page = curentPage;
    else {
        if (p_Page == null) 
        {
                var layers = stage.children;
                for (var n = 0; n < layers.length; n++) {
                    if (layers[n].getName() == PageName) {
                        p_Page = layers[n];
                        break;
                    }
                }
        }
    }
    return p_Page;
}
    //////////////////////CRIPT CActionManager
    //AddRsc dã OK
    /////////////////////////////////////
    function AddRsc(m_id, m_file, m_type) {

        /*    phải cho phép javascript
        var fso = new ActiveXObject("Scripting.FileSystemObject");
        if (!fso.FileExists(m_file)) {
        alert("File Không tồn tại.");
        return;
        }
        var ext = fso.GetExtensionName(m_file);
        var path = location.pathname.substring(0, location.pathname.lastIndexOf('/') + 1);
        path = path.replace(/%20/g, ' ');
        path = path.replace(/\//gi, "\\");

        if (path.indexOf(":") == -1) {// kiem tra da co o dia chưa
        var d = fso.GetDrive(fso.GetDriveName(m_file));
        path = d.DriveLetter.toUpperCase() + ":" + path;
        }
        else path = path.substring(1);
        var fileto = "";
        if (m_type == 'IMAGE_OBJ')
        path = path + folder_Resource + "\\";            
        else if(m_type == 'SOUND_OBJ')
        path = path + folder_Resource + "\\"; 
             
        if (!fso.FolderExists(path)) {
        fso.CreateFolder(path);
        }
                 
        fileto =path +m_id+ '.' + ext;
        fso.CopyFile(m_file, fileto);  
        */
    }
    //// chua lam duọc
    var _hiddenInput = null;
    function CreateHiddenInput(objName) {
        if (_hiddenInput == null) 
        {
            _hiddenInput = document.createElement('input');
            _hiddenInput.type = 'text';
            _hiddenInput.style.position = 'fix';
            _hiddenInput.style.opacity = 0;
            document.body.appendChild(_hiddenInput);
           
            //
            _hiddenInput.addEventListener('keyup', function (e) {
                m_pgObjCaller.setText(_hiddenInput.value);
                curentPage.draw();
            });
            //
        }
        _hiddenInput.value = m_pgObjCaller.getText();
        _hiddenInput.focus();
    }
    function AllowEditText(pageName, objName, bAllow, cursorindex) {
        var obj = FindShape(pageName, objName);
        if (obj === null || typeof obj === undefined) return null;
        if (typeof bAllow === 'undefined')
            return obj.readonly;
        else {
            obj.readonly = bAllow;
            if (bAllow == 1)
            SetCursor(pageName, objName, "text");
        }
         if (cursorindex != 'undefined')//cursorindex=-1 insert char left
             obj.CursorIndex = cursorindex;
        }

    //////////////////
    //AnimationFly dã OK từ 1 den 8
    /////////////////////////////////
    function AnimationFly(pageName, objName, delay,step,styte) {
        var obj = FindShape(pageName, objName);
        if (obj == null) return;
        var xto = obj.x();
        var yto = obj.y();
        if (styte <= 8) {
            switch (styte) {
                case 1:
                    {
                        obj.x(0);
                        obj.y(0);
                        break;
                    }
                case 2:
                    {
                        //  obj.setX(xto);
                        obj.y(0);
                        break;
                    }
                case 3:
                    {
                        obj.x(stage.width());
                        obj.y(0);
                        break;
                    }
                case 4:
                    {
                        obj.x(stage.width());
                        //   obj.setY(yto);
                        break;
                    }
                case 5:
                    {
                        obj.x(stage.width());
                        obj.y(stage.height());
                        break;
                    }
                case 6:
                    {
                        // obj.setX(xto);
                        obj.y(stage.height());
                        break;
                    }
                case 7:
                    {
                        obj.x(0);
                        obj.y(stage.height());
                        break;
                    }
                case 8:
                    {
                        obj.x(0);
                        break;
                    }
                default:
                    break;
            }
            var delx = Math.abs(xto - obj.x());
            var dely = Math.abs(yto - obj.y());
            var delta = Math.sqrt(delx * delx + dely * dely);
            var timer = (delta / step) * delay;
            MoveObject(obj, xto, yto, timer);
        }
        else {//lơn hơn 8 gion chơi
          /*  var period = 2000;
            var anim = new Kinetic.Animation({
                func: function(frame) {
                    var scale = Math.sin(frame.time * 2 * Math.PI / period) + 0.001;
                    obj.setScale(scale);
                },
                node: curentPage
            });
            anim.start();*/
        }  
    }
    ////AnimationMagic chưa làm
    function AnimationMagic(pageName, objName, delay, step, styte, setID, inout) {
        SetRsc(pageName, objName, setID);
    }
    //// AnimationPage //chuyen qua lai giũ 2 page
    ////
    function SetResize(pageName, objName, b_resize, valid) {
        var curObject = FindShape(pageName, objName);
        if (curObject == null) return "";
    }
    function SetOpacity(pageName, objName, opacity) {
         var curObject = FindShape(pageName, objName);
         if (curObject == null) return "";
         else curObject.opacity(opacity);
     }
    
    function AnimationPage(pageTo, pageCurent, delay, step, styte) {
        GoToPage(pageTo);
        // Tam thoi GoToPage
        /*var p_pageTo = FindPage(pageTo);
        if (p_pageTo == null)
            return;
        switch (styte) {
            case 1:
                {
                    p_pageTo.setX(stage.width()-100);
                    p_pageTo.setY(0);
                    p_pageTo.show();
                    p_pageTo.draw();
                    break;
                }
            case 2:
                {
                
                    break;
                }
            default:
                break;
        }
        var delx = stage.width();
        var dely = stage.height();
        var delta = Math.sqrt(delx * delx + dely * dely);
        var timer = (delta / step) * delay;
        MoveObject(curentPage, -stage.width(), 0, timer);
        MoveObject(p_pageTo, -stage.width(), 0, 2000);
        */

    }
    // nhung ham chua lam duoc
    ////Ham nay tu dong chay sau khi record cac su kien tren man hinh
    function AutoRunAction(i_timer, stop) {//quang
    }
    function BeginRecordAction() {//quang
    
    }
    function Brightness(pageName, objName, trans, state) {//quang
    }
    function Browse(typeFile, open) {//quang
       // window.location = 'file:///' + document.form.selectedFile.value;
    }
    function BrowseFile(dirrectorry) {//quang
    }
    function ClickToWord(pageName,objName,pos) {//quang
    }
      
    ////
    ////
    function CloseFile() {
        //window.close();
        curentPage.hide();
        curentPage.draw();
    }
    function ChangeVoice(voice) { 

    }
    function CloseSocket() {//quang
       /* if ("WebSocket" in window) {
            alert("WebSocket is supported by your Browser!");
            // Let us open a web socket
            var ws = new WebSocket("ws://localhost:9998/echo");
            ws.onopen = function() {
                // Web Socket is connected, send data using send()
                ws.send("Message to send");
                alert("Message is sent...");
            };
            ws.onmessage = function(evt) {
                var received_msg = evt.data;
                alert("Message is received...");
            };
            ws.onclose = function() {
                // websocket is closed.
                alert("Connection is closed...");
            };
        }
        else {
            // The browser doesn't support WebSocket
            alert("WebSocket NOT supported by your Browser!");
        }*/
    }
    function Connect(nameIP, iPort) {
    // quang
    }
    function CopyFile(FileSrc, FileTo) {
     /*   var fso = new ActiveXObject("Scripting.FileSystemObject");
        fso.CopyFile(FileSrc, FileTo);*/
    }
    function CreateFolder(path) {
     /*   var fso = new ActiveXObject("Scripting.FileSystemObject");
        if (!fso.FolderExists(path)) {
            fso.CreateFolder(path);
        }*/
    }
    function CreateNewPage(pageName) {
        stage.add(new Kinetic.Layer({ name: pageName }));
    }
    function CreateObj(pageName, ObjName, ObjType, FileRsc, left, top, width, height) {
        if (ObjName==="")
        {
            var now = new Date();
            ObjName = now.getTime();
        }
        var obj = FindShape(pageName, ObjName);
        if (obj == null) {
            var newobject = CreText(ObjName, left, top, width, height, FileRsc, 'rgba(0, 0, 0, 0)', 'rgba(255, 255, 255, 1.00)', 'rgba(0, 0, 0, 1)', 'rgba(255, 255, 255, 1.00)',
                folder_Resource + '/', 14, 'Verdana', 'Normal', 'center', 'middle', ObjType, '0.00', '30', '30', 0, 'rgba(255, 255, 255, 1)', 'rgba(0, 0, 0, 1)', '0', '0', 'rgba(255, 255, 255, 1)', '0', '0', '4', '0', 0, 0, 'rgba(128, 128, 128, 1)');
            var pageContent = FindPage(pageName);
            pageContent.add(newobject);
            InvalidateObj();
            return newobject.name();
        }
        else return obj.name();        
    }
// QuangND17 Start add 2017/11/15 
    //var consonant = "ngh|ch|gi|gh|kh|ng|nh|ph|qu|th|tr|b|c|d|đ|g|h|k|l|m|n|p|q|r|s|t|v|x".split("|");
    //var doc_la = "ngờ|chờ|dờ|ngờ|khờ|ngờ|nhờ|phờ|quờ|thờ|trờ|bờ|cờ|dờ|đờ|gờ|hờ|ca|lờ|mờ|nờ|pờ|quờ|rờ|sờ|tờ|vờ|xờ".split("|");
    //function TachDau(strWord) {
    //    huyen = "àầằèềùừỳìòồờ";
    //    sac = "áấắéếúứýíóốớ";
    //    nang = "ạậặẹệụựỵịọộợ";
    //    hoi = "ảẩẳẻểủửỷỉỏổở";
    //    nga = "ãẫẵẽễũữỹĩõỗỡ";
    //    var charx = huyen.split("");
    //    for (i = 0; i < charx.length; i++)
    //        if (strWord.indexOf(charx[i]) >= 0)
    //            return "huyền";
    //    charx = sac.split("");
    //    for (i = 0; i < charx.length; i++)
    //        if (strWord.indexOf(charx[i]) >= 0)
    //            return "sắc";
    //    charx = nang.split("");
    //    for (i = 0; i < charx.length; i++)
    //        if (strWord.indexOf(charx[i]) >= 0)
    //            return "nặng";
    //    charx = hoi.split("");
    //    for (i = 0; i < charx.length; i++)
    //        if (strWord.indexOf(charx[i]) >= 0)
    //            return "hỏi";
    //    charx = nga.split("");
    //    for (i = 0; i < charx.length; i++)
    //        if (strWord.indexOf(charx[i]) >= 0)
    //            return "ngã";
    //    return "";
    //}
    //function SpellWord(word) {
    //    word = word.toLowerCase();
    //    word = word.replace(',', '');
    //    word = word.replace('.', '');
    //    word = word.replace('!', '');
    //    var dau = TachDau(word);
    //    var ko_dau = LoaiBoDau(word);
    //    var nguyenam = "";
    //    for (var j = 0; j < consonant.length; j++)
    //        if (word.indexOf(consonant[j]) == 0) {
    //            nguyenam = consonant[j]
    //            break;
    //        }
    //    var phuam = ko_dau.replace(nguyenam, '');
    //    nguyenam = doc_la[j];
    //    var re = "";
    //    if (dau == "") {
    //        if (phuam.length == 1)
    //            re = phuam + " " + nguyenam + " " + phuam + " " + ko_dau;
    //        else
    //            re = phuam.split("").join(" ") + " " + phuam + " " + nguyenam + " " + phuam + " " + ko_dau;
    //    }
    //    else {
    //        if (phuam.length == 1)
    //            re = phuam + " " + nguyenam + " " + phuam + " " + ko_dau + " " + dau + " " + word;
    //        else
    //            re = phuam.split("").join(" ") + " " + phuam + " " + nguyenam + " " + phuam + " " + ko_dau + " " + dau + " " + word;
    //    }
    //    return re;
    //}
    function DanhVan(tu) {
        //var a_words = words.split(" ");
        //var kq = "";
        //for (var i = 0; i < a_words.length; i++)
        //    kq = kq + SpellWord(a_words[i]) + ", ";
        //kq = kq + words;
        //return re;
    }
// QuangND17 End add 2017/11/15 

    function Delay(code, millisec) {
        if (typeof millisec === 'undefined')
            return;
        setTimeout(code, millisec);
        return;
    }
    function DeleteObj(pageName, objectName) {
        var page = FindPage(pageName);
        if (page == null) return;
        var object = FindShape(pageName, objectName);
        if (object == null) return;
        object.remove();
        page.draw();
    }
     function DestroyObjectHwnd(pageName, objName) {//khong can lam Animationgif
     }
     function DivideImage(pageName, objName,x,y,id) {//quang
     }
     function DocChu(tu) {//quang
         tu.toLowerCase();
     }
     function DrawPageInObject(pageName,objName) {//quang
     }
     function DrawStyte(pageName, objName, iEven) {//quang
     }
     function Enable(pageName, objName, m_enable) {//quang
     }
     function EnableWndDraw(pageName, objName, bEnable) {//quang
     }
     function EndRecordAction() {//quang
     }
     function ExecAsThread(command) {
         return eval(command.toString());
     }
     function ExeDML(rsc_sql, s_query) {//quang
     }
     function ExeQuery(rsc_sql, s_query) {//quang
     }
     function ExitApp(rsc_sql, s_query) {
         window.close();
     }
     function ExportObj(pageName, objName, fileName) { //quang
     }
     function StopVN() {

     }
  
     function FileFind(m_Path, strFilter) {
        /// kết quả đã đúng trã về một list file
        /* var Fo = new ActiveXObject("Scripting.FileSystemObject");
         if (Fo.FolderExists(m_Path)) {
             var FileName = new String();
             var Extention = new String();
             var StrOut = new String();
             FileName = (strFilter.lastIndexOf(".") > -1) ? strFilter.slice(0, strFilter.lastIndexOf(".")) : (strFilter.length > 0) ? strFilter.toLowerCase() : "*"; //Get Searched File Name
             Extention = (strFilter.lastIndexOf(".") > -1) ? strFilter.slice(strFilter.lastIndexOf(".") + 1).toLowerCase() : "*"; // Get Searched File Extention Name

             var FOo = Fo.GetFolder(m_Path);
             var FSo = new Enumerator(FOo.Files);
             for (i = 0; !FSo.atEnd(); FSo.moveNext()) {
                 if (FileName == "*" || FSo.item().name.slice(0, FSo.item().name.lastIndexOf(".")).toLowerCase().indexOf(FileName) > -1)
                     if (Extention == "*" || FSo.item().name.slice(FSo.item().name.lastIndexOf(".") + 1).toLowerCase().indexOf(Extention) > -1) {
                         StrOut += "||"+ FSo.item().name;
                     i++
                 }
             }
         }*/
         // lam cho giong ket qua Lac Viêt Disign
    /*     var Fo = new ActiveXObject("Scripting.FileSystemObject");
         if (Fo.FolderExists(m_Path)) {
             var FileName = new String();
             var Extention = new String();
             var StrOut = new String();
             FileName = (strFilter.lastIndexOf(".") > -1) ? strFilter.slice(0, strFilter.lastIndexOf(".")) : (strFilter.length > 0) ? strFilter.toLowerCase() : "*"; //Get Searched File Name
             Extention = (strFilter.lastIndexOf(".") > -1) ? strFilter.slice(strFilter.lastIndexOf(".") + 1).toLowerCase() : "*"; // Get Searched File Extention Name

             var FOo = Fo.GetFolder(m_Path);
             var FSo = new Enumerator(FOo.Files);
             for (i = 0; !FSo.atEnd(); FSo.moveNext()) {
                 if (FileName == "*" || FSo.item().name.slice(0, FSo.item().name.lastIndexOf(".")).toLowerCase().indexOf(FileName) > -1)
                     if (Extention == "*" || FSo.item().name.slice(FSo.item().name.lastIndexOf(".") + 1).toLowerCase().indexOf(Extention) > -1) {
                         //StrOut = FSo.item().name;
                         StrOut = FSo.item().Path;
                         break;
                       
                 }
             }
         }
         return StrOut;
         */
     }
     function FillImage(pageName, objName, red, green, blue, x, y) {//quang
         if (typeof x === "undefined" || typeof y === "undefined") {
             var ptPoint = stage.getPointerPosition();
             x = ptPoint.x;
             y = ptPoint.y;
         }
         PaintFillColor("", objName, RGB(red, green, blue));  
         PaintDownObj(x, y, objName, 40);
     }
     function FindObj(pageName, objName) {
         var obj = FindShape(pageName, objName);
         if (obj) return obj.getName();
         else return "";
     }    		
     function GetBoundsText(pageName, objName,  pt, start, len) {
         var curObject = FindShape(pageName, objName);
         if (curObject == null) return null;
         var text = curObject.getText();
         if (!isNaN(start) && !isNaN(len))
             text = text.substr(start, len)
         var rectBound = curObject.getBoundsText(text);
           pt.toLowerCase();
        	if(pt==""||pt=="l")
        	    return rectBound.actualBoundingBoxLeft;
			else if(pt=="t")
				return curObject.y();		
			else if(pt=="w")
			    return rectBound.width;
			else if(pt=="h")
				return curObject.getTextHeight()*2;
			else if(pt=="r")
			    return rectBound.actualBoundingBoxRight;
			else if(pt=="b")
				return curObject.y()+ curObject.getTextHeight();
			else return 0;
        }
     function GetColCount(rsc_sql, tableName) {//quang
     }
     function GetColor(pageName, objName, colorttt) {

         var curObject = FindShape(pageName, objName);
         if (!curObject) 
         {
             //BR color
             var mousePos = stage.getPointerPosition();
             var context = curentPage.getContext();
             var picel = context.getImageData(mousePos.x, mousePos.y, 1, 1).data;
             if (picel != 'undefined')
             {
             var guments = "rgba({0}, {1}, {2}, {3})".format(picel[0],picel[1],picel[2], picel[3]);
             return guments;
              }
             return;
         }
         if (colorttt == null || typeof colorttt == 'undefined') {
             var fill = curObject.getFill();
             if (fill == 'rgba(0, 0, 0, 0)')
                 return 0; //no fill
             else if (fill.start && fill.end)
                 return 2; //2 màu
             else if (fill.fillPatternImage != null) {
                 //QuangND17 Fix 2019/08/29 
                 // Doi voi SetRsc khong can luu gia tri de Get
                 var filename = curObject.fillPatternImage().src;
                 filename = filename.substring(filename.lastIndexOf('/') + 1, filename.lastIndexOf('.'));
                 return filename;
             }
             else return 1;  //một màu
         }
         else { //co tham so phia sau de lay gia tri
              fill = curObject.getFill();
              if (fill.fillPatternImage != null) {
                  //QuangND17 Fix 2019/08/29 
                  // Doi voi SetRsc khong can luu gia tri de Get
                  var filename = curObject.fillPatternImage().src;
                  filename = filename.substring(filename.lastIndexOf('/') + 1, filename.lastIndexOf('.'));
                  return filename;
             }
             else if (fill == 'rgba(0, 0, 0, 0)')
                 return 'rgba(0, 0, 0, 0)'; //no fill
             else if (fill.start && fill.end)
                 return fill.colorStops; //2 màu
             else return fill; //một màu
         }         
     }
     function GetCountCall(end ) { //quang  khoong biet lam gi
     }
     function GetCountObj(pageName, m_type) {
         var page = FindPage(pageName);
         return page.children.length;
     }
     function GetCursorPos(pt, docclient) {
         var ptPoint = stage.getPointerPosition();
         if (docclient != null || picel != 'undefined') {
             if (pt === "" || pt === "x")
                 return parseInt(ptPoint.x / m_dZoomScale);
             else
                 return parseInt(ptPoint.y / m_dZoomScale);
         }
         else {
             if (pt === "" || pt === "x")
                 return parseInt(ptPoint.x);
             else
                 return parseInt(ptPoint.y);
         }
     }
     function charCodeAt(str, index) {
         return str.charCodeAt(index);
     }
     function GetFocusObj() {
         return m_pgObjCaller.name();
     }
     function GetFolder(styte) {
 /*   
             var fso = new ActiveXObject("Scripting.FileSystemObject");
             var path = window.location.pathname.substring(0, location.pathname.lastIndexOf('/') + 1);
             path = path.replace(/%20/g, ' ');
             path = path.replace(/\//gi, "\\");
             if (path.indexOf(":") == -1) {// kiem tra da co o dia chưa
                 var d = fso.GetDrive(fso.GetDriveName("C:\\"));
                 path = d.DriveLetter.toUpperCase() + ":" + path;
             }
             else path = path.substring(1);
             return path; 
   */ 
     }
     function GetHeight(page, object) {
         var curObject = FindShape(page, object);
         if (curObject == null) return "";
         return curObject.height();
     }
     function GetKeyByID(idrsc) {
         return GetFolder() + "\\" + folder_Resource + "\\" + idrsc + ".PNG";
     }
     function GetKeyDown(pageName, format) {
         return String.fromCharCode(KeyCode);
        
       /*  if (format != null)
             return KeyCode.charCodeAt(KeyCode);
         else
             return KeyCode;*/
     }
     function GetLeft(page, object) {
         var curObject = FindShape(page, object);
         if(curObject== null) return "";
         if (typeof curObject != 'undefined')
             return curObject.x();
     }
     function GetMoveClick(page, object) {
         return false;
     }
     function GetMoveView(page, object) {
         var curObject = FindShape(page, object);
         return curObject.draggable();
     }
     function GetName(page, index) {
         var outName;
          if(index != null)
              outName = curentPage.children[index].name();
          else outName = m_pgObjCaller.name();
            if (!isNaN(outName))
                return parseInt(outName);
            else return outName;
     }
     function GetNextFocus() {
         var c_i = m_pgObjCaller.index + 1;
         if (c_i >= curentPage.children.length) c_i = 0;
         return curentPage.children[c_i].getName();
     }
     function GetPointDown(PageName, ObjName, pt) {
         if (pt != null) {
             if (pt == "" || pt == "x")
                 return m_pointDown.x;
             else return m_pointDown.y;
          }
          else return m_pointDown.x;
      }
      function GetPointDownEx(pt, docclient) {
       /*   if (docclient != null)
      	    ClientToDoc(m_pointDown);	*/
	    if(pt==""|| pt=="x")		
			return m_pointDown.x;
		else
			return m_pointDown.y;
}
function GetPosSound() {
    if (m_soundPlaying){
        return m_soundPlaying.getTime(); 
    }
      
    else return -1;		
    }

    function GetRectRestore(pageName, objName, pt) {
        var curObject = FindShape(pageName, objName);
        if (curObject == null) return "";
        var config = curObject.getInitConfig();
        if (pt!=null)
		{
		    if (pt == "" || pt == "l")
		        return config.x;
		    else if (pt == "t")
		        return config.y
		    else if (pt == "w")
		        return config.width;
		    else if (pt == "h")
		        return config.height;
		    else if (pt == "r")
		        return config.x + config.width;
		    else if (pt == "b")
		        return config.y + config.height;
		    else return 0; 
		}
		else
		    return config.x;
}
function GetResize(page, object) {//quang
    return false;
}
function GetRGB(rgb, hex) {
   if (hex[0]=="#") hex=hex.substr(1);
   if (hex.length==3)
    {
    var temp=hex; hex='';
    temp = /^([a-f0-9])([a-f0-9])([a-f0-9])$/i.exec(temp).slice(1);
    for (var i=0;i<3;i++) hex+=temp[i]+temp[i];
    }
     var triplets = /^([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i.exec(hex).slice(1);
     if (rgb === 'r')
         return parseInt(triplets[0], 16);
     else if (rgb === 'g') return parseInt(triplets[1], 16);
     else if (rgb === 'b') return parseInt(triplets[2], 16);
 }
 ///
 function GetRotateObj(pageName, objName) {
     var curObject = FindShape(pageName, objName);
     return curObject.getRotationDeg();
 }
 function GetRowCount(rsc_sql, tableName) {
     return 0; //quang
 }
 function GetRsc(pageName, objName) {
     var curObject = FindShape(pageName, objName);
     if (curObject == null) return "";
     var id_rsc = curObject.getRsc();
     if (id_rsc == "") {
         var config = curObject.getFill();
         if (typeof config.image == null || typeof config.image == 'undefined') return null;
         var urlImage = config.image.src;
         if (typeof urlImage == null || typeof urlImage == 'undefined') return null;
         return urlImage.substring(urlImage.lastIndexOf('/') + 1, urlImage.lastIndexOf('.'));
     }
     else return id_rsc;
 }
 function EvenToText(iEvent)
{
    var st = "";
    iEvent = parseInt(iEvent);
	switch(iEvent) {
	case 0:
	    st = "mouseup touchend dragend";
		break;
	case 1:
	    st = "mousedown touchstart dragstart";
		break;
	case 2:
	    st="OnKeyDown";
		break;
	case 3:
		st="OnLoadPage";
		break;
	case 4:
		st="OnTimer";	
		break;
	case 5:
	    //st="OnRightBtUp";	
	    st = "dblclick";	
		break;
	case 6:
		st="mouseover";	
		break;
	case 7:
		st="dblclick";	
		break;
	case 8:
	    //st="OnRightBt2Click";	
	    st = "dblclick";
		break;			
	case 10:
		st="mouseout";	
		break;			
	default:
		st="";
		break;
}
		return st;
}
function GetScriptObj(pageName, objName, iEven, nocall) {
    if (typeof objName == 'undefined') return;
     var curObject = FindShape(pageName, objName);
     if (curObject == null) return "";
     var s_Even = EvenToText(iEven);
     if (s_Even == "") return;
   
     var m_script = curObject.eventListeners[s_Even][0].handler.toString();
     var supIndx = m_script.indexOf('{');
     var last = m_script.lastIndexOf("}") + 1;
     var bodyFunce = m_script.substring(supIndx, last);
     var fune = new Function(bodyFunce);
     if (typeof m_pgObjCaller != 'undefined') {
         m_pgObjCaller.off(s_Even);
         m_pgObjCaller.on(s_Even, fune);
     }
     if (typeof nocall == 'undefined') {
         bodyFunce= bodyFunce.replace("m_pgObjCaller = this;", "")
         var funeCal = new Function(bodyFunce);
         funeCal();
     } 
 }
  function SetScriptObj(pageName, objName, m_script ,iEven) {
     var curObject = FindShape(pageName, objName);
     if (curObject == null) return "";
     var s_Even = EvenToText(iEven);
     var supIndx = m_script.indexOf('{');
     var last = m_script.lastIndexOf("}")+1;
     var bodyFunce = m_script.substring(supIndx, last);
     bodyFunce= bodyFunce.insert(1, "m_pgObjCaller = this;\r\n");
     //"m_pgObjCaller = this;"+
     if (s_Even == "") return;
     m_pgObjCaller = curObject;
     var fune = new Function(bodyFunce);
     curObject.off(s_Even);
     curObject.on(s_Even, fune);
 }
 	
 function GetSelectObj() {
     return m_pgObjCaller.getName();
 }
 function GetSelText(pageName, objName) { //quang
 }
 function GetShowObject(pageName, objName) {
     var curObject = FindShape(pageName, objName);
     if (curObject == null) return "";
     else return curObject.getAttrs().visible;
 }
 function GetText(pageName, objName) {
     var curObject = FindShape(pageName, objName);
     if (curObject === null || typeof curObject === undefined) return null;
     var output = curObject.getText();
     if (output == "" || output==' ') return output;
     if (!isNaN(output))
         return parseInt(output);
     else return output;
 }
 function GetTextFromID(sID, Catalog) {
     if (typeof hashIDText[sID] != 'undefined')
         return hashIDText[sID];
     else return "";
 }
 function GetTop(pageName, objName) {
     var curObject = FindShape(pageName, objName);
     if (curObject == null) return "";
     if (typeof curObject != 'undefined')
         return curObject.y();
 }
 function GetTypeObj(pageName, objName) {
     /*var curObject = FindShape(pageName, objName);
     if (curObject == null) return "";*/
     //objName.nodeType
     return "Text";
 }
 function GetValueTable(rsc_sql, tableName, row, col) {//quang
 }
 function GetVar(key) {//quang
     return myArray[key];
 }
 function GetVirtKey(nVirtKey) {//quang
     var bControl = false;
     bControl = KeyCode.ctrlKey
     return bControl;
 }
 function GetWidth(page, object) {
     var curObject = FindShape(page, object);
     if (curObject == null) return "";
     return curObject.width();
 }
 function GoToPage(pageName) {
   
     var p_Page = null;
     if (pageName == "")
     p_Page = curentPage;
     else {
     pageName = pageName.replace(/ /g, '_');
     var layers = stage.children;
     for (var n = 0; n < layers.length; n++) {
     if (layers[n].getName() == pageName) {
     g_iCurrentPage = n;
     p_Page = layers[n];
     m_pgObjCaller = null;
     break;
     }
     }
     }
     if (p_Page != null) {
     curentPage.hide();
     curentPage.draw();
     curentPage = p_Page;
     var config = curentPage.getInitConfig();
     if (config.callback)
         eval(config.callback);
     curentPage.scale({ x: m_dZoomScale, y: m_dZoomScale });
     curentPage.show();
     curentPage.draw();
     }
     }
     function InitRandom(end) {

     }
     function InsertPageFromFile(FileName, pos) {
     }
     function intersectRectabcd1234(a, b) {
     return (a.left <= b.right &&
     b.left <= a.right &&
     a.top <= b.bottom &&
     b.top <= a.bottom)
     }
     function IntersectRect(page, object, objectBound, bitmap) {
         var curObject = FindShape(page, object.toString());
         if (curObject == null) return false;
         var object2 = FindShape(page, objectBound.toString()); //stage.getShapeByName(objectBound);
         if (object2 == null) return false;
         return !(curObject.x() > object2.x() + object2.width() ||
          curObject.x() + curObject.width() < object2.x() ||
          curObject.y() > object2.y() + object2.height() ||
          curObject.y() + curObject.height() < object2.y());
     }
         function InvalidateObj(pageName, objName) {
             if (pageName === "") {
                 if ("undefined" === typeof m_pgObjCaller) {
                     if (curentPage)
                         curentPage.draw();
                     return;
                 }
                 if (m_pgObjCaller != null) {
                     curentPage = m_pgObjCaller.parent;
                     
                     while(curentPage.nodeType != 'Layer')// is Group
                         curentPage = curentPage.parent;
                 }
                 curentPage.draw();
             }
             else {
                 var page = FindPage(pageName);
                 if (page != null)
                     page.draw();
             }
         }
         function IsFileName(fleName) {
            /* var fso = new ActiveXObject("Scripting.FileSystemObject");
             if (fso)
                 return fso.FileExists(fleName);
                 */
         }
         function IsRsc(id) {
             var re = FileFind(folder_Resource + "\\", id);
             if (re == "")
                 re = FileFind(folder_Resource + "\\", id);
             return re;
         }
         function KillTimerPage() {
             clearInterval(myVarTimerPage);
         }

         function LengthSound(id_sound, from_file) {
             if (typeof id_sound == 'undefined') {
                 return m_soundPlaying.getDuration();
             }
             else {
                 var snd = new buzz.sound(folder_Resource + "/" + id_sound);
                 snd.addEventListener("canplaythrough", function (e) {
                     return snd.getDuration();
                 });
             }
         }
         function Listent(iPort){
                pubnub.subscribe({
                channel: $.url().param("iPort"),
                message: function (m) { console.log(m) }
            });
         }
         function MarkObj(pageName, objName, Start, End, styteMark, color) {//quang
         }
         function Message(text, y_n, k) {
             if (y_n != null)
                 if (confirm(text)) {
                     return 6;
                 }
                 else return 7;
             else alert(text);

         }
         function IsJsonString(str) {
             try {
                 JSON.parse(str);
             } catch (e) {
                 return false;
             }
             return true;
         }
         var tweens = [];       
         var listFun = [Kinetic.Easings.EaseInOut, Kinetic.Easings.BackEaseIn, Kinetic.Easings.BackEaseOut,
             Kinetic.Easings.BackEaseInOut, Kinetic.Easings.ElasticEaseIn, Kinetic.Easings.ElasticEaseOut,
             Kinetic.Easings.ElasticEaseInOut, Kinetic.Easings.BounceEaseOut, Kinetic.Easings.BounceEaseIn,
             Kinetic.Easings.BounceEaseInOut, Kinetic.Easings.EaseIn, Kinetic.Easings.EaseOut,
             Kinetic.Easings.EaseInOut, Kinetic.Easings.StrongEaseIn, Kinetic.Easings.StrongEaseOut,
             Kinetic.Easings.StrongEaseInOut, Kinetic.Easings.Linear];
         function transitionTo(page, object, timer, xto, yto, scaleValue, rotDeg, anpha, styteMove, callbackFinish, callbackReset) {
             //"const pageName, const objName, const timer, const xto, const yto, [const scaleValue, const rotDeg, const opacity, const callback])",
             var curObject = FindShape(page, object);            
             if (curObject == null) return "";
             // Get Value Input
             var type = Kinetic.Easings.Linear;
             if (typeof styteMove != 'undefined') {
                 var intk = parseInt(styteMove);
                 type = listFun[intk];
             }
             var config = curObject.getInitConfig();
             if (xto == -1) xto = config.x;
             if (yto == -1) yto = config.y;
             //bien luan 1 so bien chưa lam

             timer = parseInt(timer) / 1000;
             // QuangND Fix 2019/08/04
             var scaleObj = { x: 1, y: 1 };
             if (typeof scaleValue != 'undefined') {
                 if (IsJsonString(scaleValue)){
                     scaleObj = JSON.parse(scaleValue);
                 }
                 else {
                     scaleObj.x = scaleValue
                     scaleObj.y = scaleValue
                 }
             }
             var rotate = 0;
             if (typeof rotDeg != 'undefined') {
                 rotate = rotDeg;
             }
             var opaci = 1;
             if (typeof anpha != 'undefined') {
                 opaci = anpha;
             }
             var twCofig = {
                 node: curObject,
                 x: xto,
                 y: yto,
                 duration: timer,
                 rotationDeg: rotate,
                 opacity: opaci,
                 scaleX: scaleObj.x,
                 scaleY: scaleObj.y,
                 easing: type,
                 onFinish: null,
                 onReset: null
             };
             if (typeof callbackFinish != 'undefined') {
                 twCofig.onFinish = function () { eval(callbackFinish) }
             }
             if (typeof callbackReset != 'undefined') {
                 twCofig.onReset = function () { eval(callbackReset) }
             }
             // End Get Value
             
             var itemtw = tweens.find(item => item.node === curObject);
             if (itemtw) {               
                 if (itemtw.tween.state >= 2)
                     return; // isplay 2: playing; 3:  reverseing
                 else {
                     //update onFinish                    
                     itemtw.onFinish = twCofig.onFinish;
                     itemtw.onReset = twCofig.onReset;                   
                     for (key in twCofig)
                         itemtw._addAttr(key, twCofig[key])
                     itemtw.duration = twCofig.duration * 1000;
                     itemtw.tween._time = 0;
                     itemtw.play();
                 }
             }
             else {                
                 // var w = curObject.getWidth()/2;
                 // var h = curObject.height() / 2;
                 //offset: {x: w,y: h},
                 var tween = new Kinetic.Tween(twCofig);               
                 tweens.push(tween);
                 tween.play();
             }
           
         }
        // quangnd17 2019/08/04 call after onFinish even tween
         function Reverse(objName)
         {           
             var tween = tweens.find(item => item.node.name() === objName);
             if (tween) {                
                 tween.reverse();
             }                
         }
         function MoveObjectTo(page, object, x, y, delay, step, styteMove, callbackFunction) {
             var curObject = null;
             if (object === "") {
                 curObject = m_pgObjCaller;
             }
             else {
                 curObject = FindShape(page, object);
             }
             if (curObject == null) return;
             var config = curObject.getInitConfig();
             if (x == -1) x = config.x;
             if (y == -1) y = config.y;
                if (arguments.length < 5) 
                {
                 curObject.x(x);
                 curObject.y(y);
                 stage.draw();
                 return;
             }
             var type= Kinetic.Easings.Linear;
             if (typeof styteMove != 'undefined') {
                 var intk = parseInt(styteMove);
                      type = listFun[intk];
             }
             var timer = delay * step / 1000;
             //easing function. can be linear, ease-in, ease-out, ease-in-out, back-ease-in, back-ease-out, back-ease-in-out, elastic-ease-in, elastic-ease-out, elastic-ease-in-out, bounce-ease-out, bounce-ease-in, bounce-ease-in-out, strong-ease-in, strong-ease-out, or strong-ease-in-out linear is the default
             var tween = new Kinetic.Tween({
                 node: curObject,
                 x: x,
                 y: y,
                 duration: timer,
                 easing: type
             });             
             if (typeof callbackFunction != 'undefined')                  
                     tween.onFinish = function () { eval(callbackFunction) }                                                               
                 tween.play();                                     
         }
         function MoveObjectToEx(pageName, objName, x, y, width, hight, delay, Autorerse, Repeat, m_bexit) {//quang
         }
         function toHex(num) {
             if (num == null || num == 0) return "00";
             var hex = Number(num).toString(16);
             while (hex.length < 2) {
                 hex = "0" + hex;
             }
             return hex;
         }
         function RGB(red, green, blue, a) {
             var hex = "#" + toHex(red) + toHex(green) + toHex(blue);
             return hex;
         }
         function rgb2hex(rgb) {
             if (rgb.substr(0, 1) === '#') {
                 return rgb;
             }
             rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
             return (rgb && rgb.length === 4) ? "#" +
             ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) +
             ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) +
             ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';
         }
       
         function NewFile(fileName) { //quang
         }
         function NextPage() {
             if(styteView === 'Ver') return;
             var layers = stage.children;
             if (g_iCurrentPage >= layers.length - 1)
                 return;
             curentPage.hide();
             curentPage.draw();
             g_iCurrentPage = g_iCurrentPage + 1;
             curentPage = layers[g_iCurrentPage];
             m_pgObjCaller = null;
             var config = curentPage.getInitConfig();
             if (config.callback) {
                 eval(config.callback);
             }
             curentPage.scale({ x: m_dZoomScale, y: m_dZoomScale });
             curentPage.show();
             curentPage.draw();
         };
         function ObjFlip(pageName, objName, iHorz, iVert) {
         }
         function OpenFile(fileName, pageNameGoto) {
             //document.open(fileName);
             fileName = replaceStr(fileName, '\\', '');
             var file_html = fileName.replace(/lvm/g, 'html');
             var local = window.location.pathname;
             var dir = local.substring(0, local.lastIndexOf('/') + 1);
             window.open(dir + file_html, "_self");
             // window.open(dir + file_html);

         }
         function OpenFileCHM(m_strFile) {
         }
         function OpenFileFromID(id) {
         }
         function OpenUrl(m_url) {
             window.open(m_url, "NewWindow", "blah");
             /*if (IsFileName(m_url)) {
                 var oShell = new ActiveXObject("Shell.Application");
                 oShell.ShellExecute(m_url, "", "", "open", "1");
             } else window.open(m_url, "NewWindow", "blah");*/
         }
         function OrderObj(page, object, posType) {
             var curObject = FindShape(page, object);
             if (posType == 0)
                 curObject.moveDown();
             else if (posType == 1)
                 curObject.moveToTop();
             else if (posType == 2)
                 curObject.moveUp();
             else if (posType == 3)
                 curObject.moveToBottom();
         }
         function PaintCap(page, object, iCap) {
         }
         function PaintColor(page, object, color, value_a) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             var context = curObject.getContext();
             if (typeof value_a == 'undefined')
                 context.strokeStyle = color;
             else {
                 if (color[0] == "#") {
                     var guments = "rgba({0}, {1}, {2}, {3})".format(GetRGB("r", color), GetRGB("g", color), GetRGB("b", color), value_a);
                     context.strokeStyle = guments;
                 }
                 else {
                     var cl = color.replace(/[^,]+(?=\))/, value_a);
                     context.strokeStyle = cl;
                 }
             }

         }
         function PaintFillColor(page, object, color) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             var context = curObject.getContext();
             context.fillStyle = color;
         }
         String.prototype.format = function () {
             var formatted = this;
             for (arg in arguments) {
                 formatted = formatted.replace("{" + arg + "}", arguments[arg]);
             }
             return formatted;
         };
         function PaintFillColorA(page, object, value_a) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             var context = curObject.getContext();
             if (typeof value_a == 'undefined')
                 return;
             else {
                 var curColor = context.fillStyle;
                 if (curColor[0] == "#") {
                     var guments = "rgba({0}, {1}, {2}, {3})".format(GetRGB("r", curColor), GetRGB("g", curColor), GetRGB("b", curColor), value_a);
                     context.fillStyle = guments;
                 }
                 else {
                     var cl = curColor.replace(/[^,]+(?=\))/, value_a);
                     context.fillStyle = cl;
                 }
             }
         };
         function PaintColorA(page, object, value_a) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             var context = curObject.getContext();
             if (typeof value_a == 'undefined')
                 return context.strokeStyle;
             else {
                 var curColor = context.strokeStyle;
                 if (curColor[0] == "#") {
                     var guments = "rgba({0}, {1}, {2}, {3})".format(GetRGB("r", curColor), GetRGB("g", curColor), GetRGB("b", curColor), value_a);
                     context.strokeStyle = guments;
                 }
                 else {
                     var cl = curColor.replace(/[^,]+(?=\))/, value_a);
                     context.strokeStyle = cl;
                 }
             }
         };
         var m_imagePaint = new Image();
         function PaintImage(page, object, newID) {
             if ((typeof newID != 'undefined') || (newID != null)) {
                 newID = newID.toString();
                 newID = newID.replace(/[*:?<>"|\/]/ig, '');
                 m_imagePaint.onload = function () {
                 };
                 m_imagePaint.onerror = function () {
                     this.src = folder_Resource + "\\" + newID + ".JPG";
                     this.onerror = function () {
                         this.src = folder_Resource + "\\" + newID + ".GIF";
                         this.onerror = function () {
                             Message("Không tim thấy id rsc: " + newID)
                             return;
                         };
                     };
                 };
                 m_imagePaint.crossOrigin = "anonymous";
                 m_imagePaint.src = folder_Resource + "\\" + newID + ".PNG";
             }
         }
         function PaintImageS(page, object, rscPaint, count, index) {
         }
         function PaintPattern(page, object, style, iColorStart, iColorEnd) {
         }
         function PaintType(page, object, type) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             if (typeof type == 'undefined')
                 return curObject.paintType();
             else curObject.paintType(type);
           
         }
         function PaintWidth(page, object, width) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             var context = curObject.getContext();
             context.lineWidth = width;
         }
         function PauseAudio(b_pause) {
             if (m_soundPlaying) {
                 if (m_soundPlaying.paused == false) m_soundPlaying.pause();
                 else m_soundPlaying.play();
             }

         }
         function Play(page, object, waversc) {
             if ((typeof waversc != 'undefined') || (waversc != null))
                 PlaySound(waversc);
         }
         function PlayAction() {
         }
         function PauseVN() { }
         function PauseVideo(pageName, objName) { }
         function isNumber(n) {
             return !isNaN(parseFloat(n)) && isFinite(n);
         }
         function PlayFromTo(rsc_sound, n_from, n_to) {
            
             m_soundPlaying = new buzz.sound(folder_Resource + "/" + rsc_sound);
             m_soundPlaying.stop();
             m_soundPlaying.setTime(n_from);
             m_soundPlaying.play();
             m_soundPlaying.bind("timeupdate", function () {
                 var timer = m_soundPlaying.getTime();
                 if (Number(timer) >= Number(n_to)) {
                     m_soundPlaying.unbind("timeupdate");
                     m_soundPlaying.stop();
                     return;
                 }
             });
         }
         function PlaySound(rsc_sound, m_brepeat, b_file) {
             m_soundPlaying = null;
             if (typeof b_file != "undefined") {
                 m_soundPlaying = new buzz.sound(b_file);
                 m_soundPlaying.load = true;
                 m_soundPlaying.play();
             }
             else if (typeof m_brepeat != "undefined") {
                 var sss = new buzz.sound(folder_Resource + "/" + rsc_sound);
                 if (m_brepeat === 0) { //no stop 1 reat
                     sss.unloop();
                 }
                 else {
                     sss.loop();
                 }
                 sss.load = true;
                 sss.play();
             }
             else if (m_soundPlaying == null) {
                 m_soundPlaying = new buzz.sound(folder_Resource + "/" + rsc_sound);
                 m_soundPlaying.load = true;
                 m_soundPlaying.play();
             }

         }


         function PlayListSound(callbackFunction) {
             var m_indexSound = 1;
             var listSound = new Array();
             for (var i = 0; i < arguments.length - 1; i++) {
                 listSound[i] = new buzz.sound(folder_Resource + "/" + arguments[i + 1]);
                 listSound[i].load();
                 //listSound[i].setSpeed(1.3);
                 if (i < arguments.length - 2)
                     listSound[i].bind("ended", function (e) {
                         m_soundPlaying = listSound[m_indexSound];
                         listSound[m_indexSound].play();
                         m_indexSound++;
                     });
                 else if (i == arguments.length - 2) {
                     listSound[i].bind("ended", function (e) {
                         eval(callbackFunction);
                     });
                 }
             }
             m_soundPlaying = listSound[0];
             listSound[0].play();

         }
         function PlayWave(pageName, objName, waversc) {
             if (m_soundPlaying != null)
                 m_soundPlaying.stop(); // ngung file đang phát
             m_soundPlaying = new buzz.sound(folder_Resource + "/" + waversc);
             m_soundPlaying.play();
             m_soundPlaying.bind("canplaythrough", function (e) {
                 _global_lenSound = e.currentTarget.duration * 1000;
             });
         }
         function PrevPage() {
             if (g_iCurrentPage <= 0)
                 return;
            if(styteView === 'Ver') return;
             var layers = stage.children;
             curentPage.hide();
             curentPage.draw();
             g_iCurrentPage = g_iCurrentPage - 1;
             curentPage = layers[g_iCurrentPage];
             m_pgObjCaller = null;
             var config = curentPage.getInitConfig();
             if (config.callback)
                 eval(config.callback);
             curentPage.scale({ x: m_dZoomScale, y: m_dZoomScale });
             curentPage.show();
             curentPage.draw();

         };
         function Print(object) {
             var curObject = FindShape("", object);
             var twidth = curObject.getWidth() * m_dZoomScale;
             var theight = curObject.getHeight() * m_dZoomScale;
             var left = curObject.x() * m_dZoomScale;
             var top = curObject.y() * m_dZoomScale;
             var configData = {
                 callback: function (dataUrl) {
                     // Fix date 2019/07/30                    
                     //window.open(dataUrl.src);
                     writeConsole(dataUrl.src);
                 },
                 mimeType: 'image/jpeg',
                 quality: 0.5,
                 width: twidth,
                 height: theight,
                 x: left,
                 y: top
             };
             curentPage.toImage(configData);
         }
         function PrintHTML(pageName, object) {
             Print(object)           
         }
         function Random(u) {
             return Math.floor(Math.random() * u);
         }
         function RecordSound(id, file) {
         }
         function PosInObj(obj) {
             var curObject = FindShape("", obj);
             if (curObject == null) return false;
             //var mousePos = stage.getMousePosition();
             var mousePos = stage.getPointerPosition();
             if (typeof mousePos != 'undefined') 
                 return curObject.intersects(mousePos);
             else return false;
         }

         function PointInObj(mousePos, obj) {
             return obj.intersects(mousePos)
         }

         function RectInRect(page, object, objectBound) {

             var curObject = FindShape(page, object); ;
             if (curObject == null) return false;

             var object2 = FindShape(page, objectBound);
             if (object2 == null) return false;
             if (curObject == object2)
                 return false;
             var mousePos = stage.getPointerPosition();
             if (typeof mousePos != 'undefined')
                 if (PointInObj(mousePos, curObject) && PointInObj(mousePos, object2)) {
                     return true;
                 }
                 else {
                     return false;
                 }
         }
         function RotateObj(pageName, objName, rotate, delay, step) {
             var curObject = FindShape(pageName, objName);
             if (curObject != null)
                 {
                     var xf = curObject.width() / 2 ;
                     var yf = curObject.height() / 2;
                 var ofset = curObject.offset();
                 if (ofset.x == 0 && ofset.y == 0)
                  {
                      curObject.offset({ x: xf, y: yf });
                      curObject.x(curObject.x() + xf);
                      curObject.y(curObject.y() + yf);        
                 } 
                 curObject.rotation(rotate);
                 curentPage.draw();
             }
         }

         function Offset(pageName, objName, xf, yf) {
             var curObject = FindShape(pageName, objName);
             if (curObject != null) {
                 if (arguments.length < 3)
                     return 0;
                 else curObject.offset({ x: xf, y: yf });
             }
         }
         function Rotating(pageName, objName, trans, state) {
             var curObject = FindShape(pageName, objName);
             if (curObject != null) {
                 curObject.opacity(trans / 255);
                 curentPage.draw();
             }
         }
         function SetSelWord(pageName, objName) {
         }
         function Save() {
         }
         function SaveObject(pageName, objName) {
        
            getImageData(pageName, objName);
             if (imageData === null)
                 return;
             var curObject = FindShape(pageName, objName);
             x_obj = parseInt(curObject.x() * m_dZoomScale);
             y_obj = parseInt(curObject.y() * m_dZoomScale);
             width = parseInt(curObject.width() * m_dZoomScale);
             height = parseInt(curObject.height() * m_dZoomScale);
             var canvas = document.createElement('canvas');
             canvas.id = 'canvas';
             canvas.width = width;
             canvas.height = height;
             var context = canvas.getContext('2d');
             context.putImageData(imageData, 0, 0, 0, 0, width, height);

             curObject.fillPriority('pattern')
             curObject.fillPatternRepeat('no-repeat');

             var dataURL = canvas.toDataURL();
             var m_image = new Image();
             m_image.crossOrigin = "anonymous";
             m_image.onload = function () {
                 curObject.fillPatternImage(m_image);
                 curObject.fillPatternScale({ x: curObject.width() / m_image.width, y: curObject.height() / m_image.height });
             }
             m_image.src = dataURL;
         }
         function writeConsole(content) {
             top.consoleRef = window.open('', 'myconsole',
  'width=640,height=480'
   + ',menubar=0'
   + ',toolbar=1'
   + ',status=0'
   + ',scrollbars=1'
   + ',resizable=1')
             top.consoleRef.document.writeln(
  '<html><head><title>https://gamechocon.com</title></head>'
   + '<body bgcolor=white onLoad="self.focus()">'
   + '<img alt="" src="' + content + '" />'
   + '</body></html>'
 )
             top.consoleRef.document.close()
         }

         function SaveID(pageName, objName, newID) {
             var curObject = FindShape(pageName, objName);
             if (curObject == null) return;
             x_obj = curObject.x() * m_dZoomScale;
             y_obj = curObject.y() * m_dZoomScale;
             width = curObject.width() * m_dZoomScale;
             height = curObject.height() * m_dZoomScale;

             var canvas = document.createElement('canvas');
             canvas.id = 'canvas';
             canvas.width = width;
             canvas.height = height;
             var context = canvas.getContext('2d');

             var context1 = curObject.getContext();
             imageData = context1.getImageData(x_obj+2, y_obj+2, width-3, height-3);
             context.putImageData(imageData, 0, 0, 0, 0, width, height);
             var dataURL = canvas.toDataURL();
             var m_image = new Image();
             m_image.crossOrigin = "anonymous";
             m_image.onload = function () {
                 var comnfigFill = {
                     image: m_image,
                     repeat: "stress"
                 }
                 curObject.setFill(comnfigFill);
             }
             m_image.src = dataURL;
             writeConsole(dataURL);
         }

         function SavePage2File(pageName, objName, FileName) {
             var configData = {
                 callback: function (dataUrl) {
                     //window.open(dataUrl.src);
                     writeConsole(dataUrl.src);
                 },
                 mimeType: 'image/jpeg',
                 quality: 0.5
             };
             curentPage.toImage(configData);
         }
         function ScaleObj(pageName, objName, valueScale) {
             var curObject = FindShape(pageName, objName);
             if (curObject != null)
                 curObject.setScale(valueScale, valueScale);
         }
         function Scaling(pageName, objName, trans) {
             var curObject = FindShape(pageName, objName);
             if (curObject != null) {
                 curObject.opacity(trans / 255);
             }
         }
         function SelectText(pageName, objName, Start, End, Red, Green, Blue) {
         }
        
         function ResumeVN() { }
         function ResumeEN() { }
         function SentScriptTo(m_script, ip, port) {
         }
         function SetBorder(pageName, object, color, width, styte) {
             var curObject = FindShape(pageName, object);
             if (curObject != null) {
                 if (typeof color === 'undefined')
                     return curObject.getStrokeWidth();
                 if (width === 0)
                     curObject.setStrokeWidth(0.0001);
                 else curObject.setStrokeWidth(width);
                 curObject.setStroke(color);
             }
         }
         function GetBorderWidth(pageName, object) {
             var curObject = FindShape(pageName, object);
             if (curObject != null) {
                 return curObject.getStrokeWidth();
             }
         }

         function SetColor(pageName, objName, red, green, blue, newID) {
             var curObject = FindShape(pageName, objName);
             if (curObject == null) return;
             if (arguments.length == 2) {
                 var config = curObject.getInitConfig();
                
                 var fillPriority = curObject.fillPriority();
                 if (config.fillPriority === "linear-gradient")
                 {
                     curObject.setFill('');
                     curObject.setFillLinearGradientStartPoint(config.fillLinearGradientStartPoint);
                     curObject.setFillLinearGradientEndPoint(config.fillLinearGradientEndPoint);
                     curObject.setFillLinearGradientColorStops(config.fillLinearGradientColorStops);
                 }
                 else  if (config.fillPriority === "color")
                     curObject.setFill(config.fill);
                 else if (config.fillPriority === "radial-graident") {
                     curObject.setFill('');
                     curObject.setFillRadialGradientStartPoint(config.fillRadialGradientStartPoint);
                     curObject.setFillRadialGradientEndPoint(config.fillRadialGradientEndPoint);
                     curObject.setFillRadialGradientColorStops(config.fillRadialGradientColorStops);
                     curObject.setFillRadialGradientEndRadius(config.fillRadialGradientEndRadius);
                 }
                 else if (config.fillPriority === "pattern")
                    
                 {
                     curObject.setFill(comnfig.fill);
                     curObject.setFillPatternImage(comnfig.fillPatternImage);
                     curObject.setFillPatternRepeat(comnfig.fillPatternRepeat);
                 }
             }
             else if ((typeof newID != 'undefined') || (newID != null)) {

                 newID = newID.replace(/[*:?<>"|\/]/ig, '');
                 var m_image = new Image();
                 m_image.crossOrigin = "anonymous";
                 curObject.fillPriority('pattern')
                 curObject.fillPatternRepeat('no-repeat');
                 var fillMode = curObject.getAttr("fillMode");
                 m_image.onload = function () {
                     curObject.fillPatternImage(m_image);
                     var w = curObject.width();
                     var h = curObject.height();
                     if (fillMode == "center") { // center
                         var dSX = 1, dSY = 1;
                         dSX = w / this.width;
                         dSY = w / this.height;
                         var m_Scale = Math.min(dSX, dSY);
                         wd = this.width * m_Scale;
                         wh = this.height * m_Scale;
                         curObject.fillPatternOffset({ x: -1 * (w - wd) * m_dZoomScale, y: -1 * (h - wh) * m_dZoomScale });
                         curObject.fillPatternScale({ x: m_Scale, y: m_Scale });
                     }
                     //if (fillMode == "stress")//stress
                     else if (fillMode == "stress" || typeof fillMode == 'undefined')
                     {
                         curObject.fillPatternOffset({ x: 0, y: 0 });
                         curObject.fillPatternScale({ x: w / this.width, y: h / this.height });
                     }
                     else if (fillMode == "title") {
                         curObject.fillPatternOffset({ x: 0, y: 0 });
                         curObject.fillPatternRepeat('repeat');
                     }
                     stage.draw();
                 };
                 m_image.onerror = function () {
                     this.src = folder_Resource + "\\" + newID + ".JPG";
                     this.onerror = function () {
                         this.src = folder_Resource + "\\" + newID + ".GIF";
                         this.onerror = function () {
                             this.src = folder_Resource + "\\" + newID + ".BMP";
                             this.onerror = function () {
                                 Message("Object " + curObject.getName() + " không tim thấy id rsc: " + newID)
                                 return;
                             }
                         };
                     };
                 };
                 m_image.src = folder_Resource + "\\" + newID + ".PNG";
             }
             else if (typeof red != 'undefined' && typeof blue == 'undefined' && typeof green == 'undefined') {
                 //var m_color = getColorValues("#" + Number(red).toString(16));
                curObject.fillPriority('color');
                 curObject.fill(red);
             }
             else if (red == "-1" && blue == "-1" && green == "-1") {
                 curObject.fillPriority('color');
                 var config = curObject.getInitConfig();
                 curObject.fill(config.fill);
             }
             else if (red != null && blue != null && green != null) {
                 curObject.fillPriority('color');
                 var color = 'rgba(' + red + ',' + green + ',' + blue + ',1)';
                 curObject.fill(color.toString());
             }

         }
         function SetColorEx(pageName, objName, color, id, styte, stytegradiant) {
             var curObject = FindShape(pageName, objName);
             if (curObject == null) return;
             var comnfigFill = {};
             if (id != null) {
                 id = id.toString().replace(/[*:?<>"|\/]/ig, ''); // Valist File name
                 var m_image = new Image();
                 m_image.crossOrigin = "anonymous";
                 curObject.fillPriority('pattern')
                 curObject.fillPatternRepeat('no-repeat');
                 var fillMode = curObject.getAttr("fillMode");
                 m_image.onload = function () {
                    curObject.fillPatternImage(m_image);                
                     var w = curObject.width();
                     var h = curObject.height();
                     if (fillMode == "center") { // center
                         var dSX = 1, dSY = 1;
                         dSX = w / this.width;
                         dSY = w / this.height;
                         var m_Scale = Math.min(dSX, dSY);
                         wd = this.width * m_Scale;
                         wh = this.height * m_Scale;
                         curObject.fillPatternOffset({ x: -1 * (w - wd) * m_dZoomScale, y: -1 * (h - wh) * m_dZoomScale });
                         curObject.fillPatternScale({ x: m_Scale, y: m_Scale });
                     }
                         //if (fillMode == "stress")//stress
                     else if (fillMode == "stress" || typeof fillMode == 'undefined') {
                         curObject.fillPatternOffset({ x: 0, y: 0 });
                         curObject.fillPatternScale({ x: w / this.width, y: h / this.height });
                     }
                     else if (fillMode == "title") {
                         curObject.fillPatternOffset({ x: 0, y: 0 });
                         curObject.fillPatternRepeat('repeat');
                     }
                     stage.draw();
                 };
                 m_image.onerror = function () {
                     this.src = folder_Resource + "\\" + id + ".JPG";
                     this.onerror = function () {
                         this.src = folder_Resource + "\\" + id + ".GIF";
                         this.onerror = function () {
                             this.src = folder_Resource + "\\" + id + ".BMP";
                             this.onerror = function () {
                                 Message("Không tim thấy id rsc: " + id)
                                 return;
                             }
                         };
                     };
                 };
                 m_image.src = folder_Resource + "\\" + id + ".PNG";
             }
             else if (color != null) {
                 // var m_color = getColorValues("#" +Number(color).toString(16));
                 curObject.fillPriority('color');
                 if (color == "-1")
                     curObject.setFill('rgba(0, 0, 0, 0)');
                 else
                     curObject.setFill(color);
             }
         }
         function GetTableValue(rsc_sql, tableName, rowid, field, tofile) {
             //"const rsc_sql,const tableName, const rowid, const field,[const tofile])",
             //quang
         }
         function SetColorPaint(pageName, objName) {//quang
         }
         function SetColorText(pageName, objName, Start, End, Red, Green, Blue, valida, a) {//quang
         }
         var myVarTimerPage = null;
         function SetTimerPage(iTimer) {
             if (myVarTimerPage) clearInterval(myVarTimerPage);
             var m_funcTimer = curentPage.getName() + "_" + "OnTimer";
             if (typeof window[m_funcTimer] === "function") {
                 myVarTimerPage = setInterval(function () { window[m_funcTimer]() }, iTimer)
             }
         }
         function SetMidiVolume(vol) {
             m_soundPlaying.setVolume(vol);
         }
         function SetCursor(page, object, text) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             curObject.on("mouseover", function () {
                 var listcur = "default crosshair e-resize help move n-resize ne-resize nw-resize pointer progress s-resize se-resize sw-resize text w-resize wait";
                 if (listcur.indexOf(text) > -1) {
                     document.body.style.cursor = text;

                 } else {

                     var guments = "url('{0}/{1}.ICO'), auto".format(folder_Resource, text);
                     document.body.style.cursor = guments;
                 }
             });
             curObject.on("mouseout", function () {
                 document.body.style.cursor = "default";
             });
             FindPage(page).draw();
             /*
             default,
             crosshair,
             e-resize,
             help,
             move,
             n-resize,
             ne-resize,
             nw-resize
             pointer
             progress
             s-resize
             se-resize
             sw-resize
             text
             w-resize
             wait
             url //'url("http://sstatic.net/stackoverflow/img/favicon.ico"), auto'
             */
         }
         function SetDigitEditText(pageName, objName, digit) {
             //quang
         }
         function SetFileMovie(pageName, objName, file) {
             //quang
         }
         function SetRsc(pageName, objName, newID) {
             var flash = document.getElementById(objName);
             if (flash != null) {
                 var clone = flash.cloneNode(true);
                 clone.setAttribute("src", folder_Resource + "\\" + newID + ".SWF")
                 flash.parentNode.replaceChild(clone, flash);
                 return;
             }
             var curObject = FindShape(pageName, objName);
             if (curObject != null) {
                 if ((typeof newID != 'undefined') || (newID != null)) {
                     curObject.setRsc(newID);
                     newID = newID.toString();
                     if (newID === "")
                         return;
                     newID = newID.replace(/[*:?<>"|\/]/ig, '');
                     var m_image = new Image();
                     m_image.crossOrigin = "anonymous";
                     var fillMode = curObject.getAttr("fillMode");
                     m_image.onload = function () {
                         curObject.fillPatternImage(m_image);
                         var w = curObject.width();
                         var h = curObject.height();
                         if (typeof fillMode === 'undefined' || fillMode == "center") { // center                          
                             var dSX = 1, dSY = 1;
                             dSX = w / this.width;
                             dSY = h / this.height;
                             var m_Scale = Math.min(dSX, dSY);
                             wd = this.width * m_Scale;
                             wh = this.height * m_Scale;
                             curObject.fillPatternScale({ x: m_Scale, y: m_Scale });
                             curObject.fillPatternOffset({ x: -1 * (w - wd) / 2, y: -1 * (h - wh) / 2 });
                         }
                         else if (fillMode == "stress") {//stress                           
                             curObject.fillPatternScale({ x: w / this.width, y: h / this.height });
                             curObject.fillPatternOffset({ x: 0, y: 0 });
                         }
                         else if (fillMode == "title") {
                             curObject.fillPatternOffset({ x: 0, y: 0 });
                             curObject.fillPatternRepeat('repeat');
                         }
                         stage.draw();
                     };
                  
                     m_image.onerror = function () {
                         this.src = folder_Resource + "\\" + newID + ".JPG";
                         this.onerror = function () {
                             this.src = folder_Resource + "\\" + newID + ".GIF";
                             this.onerror = function () {
                                 Message("Không tim thấy id rsc: " + newID)
                                 return;
                             };
                         };
                     };
                     m_image.src = folder_Resource + "\\" + newID + ".PNG";
                   
                 }
                 else {
                     //restort id
                     var config = curObject.getInitConfig();
                     curObject.setFill(config.fill);
                 }
             }
         }

         function SetText(page, object, m_text) {
             var curObject = FindShape(page, object);
             if (curObject != null) {
                 if (typeof m_text === 'undefined') {
                     var config = curObject.getInitConfig();
                     curObject.setText(config.text)
                 }
                 else curObject.setText(m_text.toString());
             }
         }
         //default,crosshair,e-resize,help,move,n-resize,ne-resize,nw-resize,pointer,progress,s-resize,se-resize,sw-resize,text,w-resize,wait


         function SetMoveView(page, object, text) {
             var curObject = null;
             if (object === "") {
                 curObject = m_pgObjCaller;
             }
             else {
                 curObject = FindShape(page, object);
             }
             if (curObject != null) {
                 if (text == 0) {
                     curObject.draggable(false); //khong move
                 }
                 else {
                     curObject.draggable(true);
                     curObject.off("mouseup");
                     if (text == 2) {//move ngang
                         curObject.setDraggable(true);
                         function MoveHor(pos) {
                             return {
                                 x: pos.x,
                                 y: this.getAbsolutePosition().y
                             }
                         }
                         curObject.setDragBoundFunc(MoveHor);
                     }
                     else if (text == 3) { //move doc
                         curObject.draggable(true);
                         function MoveVer(pos) {
                             return {
                                 x: this.getAbsolutePosition().x,
                                 y: pos.y
                             }
                         }
                         curObject.dragBoundFunc(MoveVer);
                     }
                     else { //move trong rect
                         if (isNaN(text)) {
                             var ObjectMove = FindShape(page, text);
                             if (ObjectMove == null) return null;
                             function MoveInRect(pos) {

                                 var newX = pos.x < ObjectMove.x() * m_dZoomScale ? ObjectMove.x() * m_dZoomScale : pos.x;
                                 var newY = pos.y < ObjectMove.y() * m_dZoomScale ? ObjectMove.y() * m_dZoomScale : pos.y;

                                 newX = pos.x + this.width() * m_dZoomScale > (ObjectMove.x() + ObjectMove.width()) * m_dZoomScale ? (ObjectMove.x() + ObjectMove.width() - this.width()) * m_dZoomScale : newX;
                                 newY = pos.y + this.height() * m_dZoomScale > (ObjectMove.y() + ObjectMove.height()) * m_dZoomScale ? (ObjectMove.y() + ObjectMove.height() - this.height()) * m_dZoomScale : newY;
                                 return {
                                     x: newX,
                                     y: newY
                                 };
                             }
                             curObject.dragBoundFunc(MoveInRect);
                         }
                     }
                 }
             }

         }
         function SetRectMove(page, object, objMove, stytemove) {
             //setDragBoundFunc
             var curObject = FindShape(page, object);
             var ObjectMove = FindShape(page, objMove);
             if (curObject == null) return null;
             if (ObjectMove == null) return null;
             function MoveInRect(pos) {

                 var newX = pos.x < ObjectMove.x() * m_dZoomScale ? ObjectMove.x() * m_dZoomScale : pos.x;
                 var newY = pos.y < ObjectMove.y() * m_dZoomScale ? ObjectMove.y() * m_dZoomScale : pos.y;

                 newX = pos.x + this.width() * m_dZoomScale > (ObjectMove.x() + ObjectMove.width()) * m_dZoomScale ? (ObjectMove.x() + ObjectMove.width() - this.width()) * m_dZoomScale : newX;
                 newY = pos.y + this.height() * m_dZoomScale > (ObjectMove.y() + ObjectMove.height()) * m_dZoomScale ? (ObjectMove.y() + ObjectMove.height() - this.height()) * m_dZoomScale : newY;
                 return {
                     x: newX,
                     y: newY
                 };
             }
             curObject.dragBoundFunc(MoveInRect);
         }
         //   var googleTTS = new window.GoogleTTS();
         function Speak(text, voice, option) {
             //voice=UK English Male,US English Female,Vietnamese Male
             //option= {pitch: 0->2,rate: 0->1.5, volume:0-> 1,onstart: StartCallback, onend: EndCallback}
             if (responsiveVoice.isPlaying()) {
                 responsiveVoice.cancel();
             }
             if (voice == "VN")
                 voice = "Vietnamese Female";
             else if (voice == "EN")
                 voice = "US English Female";
             if (typeof option === 'undefined')
                 responsiveVoice.speak(text, voice, { pitch: 1, rate: 0.8 });
             else
                 responsiveVoice.speak(text, voice, eval('(' + option + ')'));
         }
         function SpeakEN(page, object, text) {

             if (responsiveVoice.isPlaying()) {
                 responsiveVoice.cancel();
             }
             if (typeof text === 'undefined') {
                 var curObject = FindShape(page, object);
                 var text = curObject.getText();
                 responsiveVoice.speak(text.toString(), "US English Female", { pitch: 1, rate: 0.8 });
             }
             else
                 responsiveVoice.speak(text.toString(), "US English Female", { pitch: 1, rate: 0.8 });
         }
         function Stop(pageName, objName, waversc) {
         }
         function SpeakVN(pageName, objName, text, m_pitch, m_rate, on_start, on_end) {
             if (responsiveVoice.isPlaying()) {
                 responsiveVoice.cancel();
             }
             var i_pitch = 1;
             var i_rate = 0.8;
             if (typeof m_pitch != 'undefined')
                 i_pitch = m_pitch;
             if (typeof m_rate != 'undefined')
                 i_rate = i_rate;
             if (typeof text === 'undefined' || text == "") {
                 var curObject = FindShape(pageName, objName);
                 var text = curObject.getText();
                 responsiveVoice.speak(text.toString(), "Vietnamese Female", { pitch: i_pitch, rate: i_rate });
             }
             else
                 responsiveVoice.speak(text.toString(), "Vietnamese Female", { pitch: i_pitch, rate: i_rate, onstart: on_start, onend: on_end });
         }
         function SetSpeaker(m_bspeaker) {
             responsiveVoice.setDefaultVoice("US English Female");
         }

         function animateMoveTo(lastTime, myRectangle, animProp, x_to, y_to, Vx, Vy) {
             if (animProp.animate) {
                 // update
                 var date = new Date();
                 var time = date.getTime();
                 var timeDiff = time - lastTime;
                 var linearDistEachFrameX = timeDiff * Vx;
                 var linearDistEachFrameY = timeDiff * Vy;
                 //     if (linearDistEachFrameX == 0) linearDistEachFrameX = 1;
                 //    if (linearDistEachFrameY == 0) linearDistEachFrameY = 1;
                 var currentX = myRectangle.x();
                 var currentY = myRectangle.y();

                 animProp.countTime = animProp.countTime + timeDiff;
                 if (animProp.countTime >= animProp.sumTime) {
                     currentX = x_to;
                     currentY = y_to;

                 }

                 if (currentX != x_to || currentY != y_to) {
                     var newX, newY;
                     if (currentX < x_to) {
                         newX = currentX + linearDistEachFrameX;
                         if (newX > x_to) newX = x_to;
                     }
                     else if (currentX > x_to) {
                         newX = currentX - linearDistEachFrameX;
                         if (newX < x_to) newX = x_to
                     }
                     if (currentY < y_to) {
                         newY = currentY + linearDistEachFrameY;
                         if (newY > y_to) newY = y_to
                     }
                     else if (currentY > y_to) {
                         newY = currentY - linearDistEachFrameY;
                         if (newY < y_to) newY = y_to
                     }
                     myRectangle.setX(newX);
                     myRectangle.setY(newY);
                 }
                 else {
                     animProp.animate = false;
                     myRectangle.setX(x_to);
                     myRectangle.setY(y_to);
                 }
                 lastTime = time;
                 curentPage.draw();
                 requestAnimFrame(function () {
                     animateMoveTo(lastTime, myRectangle, animProp, x_to, y_to, Vx, Vy);
                 });
             }
             else {
                 EvenStopMove(myRectangle); //exit
             }
         }

         function MoveObject(object, x, y, timer) {
             if (timer == null) {
                 object.x(x);
                 object.y(y);
                 curentPage.draw();
             }
             else {
                 var animProp = {
                     animate: true,
                     countTime: 0,
                     sumTime: timer
                 };
                 var date = new Date();
                 var time = date.getTime();
                 if (object.x() == x) x++;
                 if (object.y() == y) y++;
                 var vx = Math.abs(object.x() - x) / timer; //van toc x
                 var vy = Math.abs(object.y() - y) / timer; //van toc y
                 animateMoveTo(time, object, animProp, x, y, vx, vy);
             }
         }

         function SetMute(idSound) {
             m_soundPlaying.mute();
         }
         function StopSound() {
             m_soundPlaying.stop();
         }
         function SetVisible(page, object, text) {
             var curObject = null;
             if (object === "") {
                 curObject = m_pgObjCaller;
             }
             else {
                 curObject = FindShape(page, object);
             }
             if (curObject == null) return;
             curObject.setVisible(text);
             curentPage.draw();

         }
         function hexToRgb(hex) {
             var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
             return result ? {
                 r: parseInt(result[1], 16),
                 g: parseInt(result[2], 16),
                 b: parseInt(result[3], 16),
                 toString: function () {
                     var arr = [];
                     arr.push(this.r);
                     arr.push(this.g);
                     arr.push(this.b);
                     arr.push(1);
                     return "rgba(" + arr.join(",") + ")";
                 }
             } : null;
         }

         function SetFontColor(page, object, color, styte) {
             if (typeof color == 'undefined') return;
             if (typeof object == 'undefined') return;

             var curObject = FindShape(page, object);
             if (curObject == null) return;
             if (color == "-1") {
                 var config = curObject.getInitConfig();
                 curObject.textFill(config.textFill);//QuangND17 Update 2019/09/05
                 return;
             }
             if (!isNaN(color))
                 color = parseInt(color);

             var hex = color.toString(16);
             hex = "FF0000".substr(0, 6 - hex.length) + hex;
             var colorResurt = hexToRgb(hex).toString();
             curObject.textFill(colorResurt);

         }
         function SetFontSize(page, object, size, valid) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             curObject.fontSize(parseInt(size) * 80 / 100);
             if (typeof valid != 'undefined')
                 InvalidateObj("", "");
         }
         function getMousePoint(ev) {
             var point = {
                 x: 0,
                 y: 0
             };

             if (typeof window.pageYOffset != 'undefined') {
                 point.x = window.pageXOffset;
                 point.y = window.pageYOffset;
             }
             else if (typeof document.compatMode != 'undefined' && document.compatMode != 'BackCompat') {
                 point.x = document.documentElement.scrollLeft;
                 point.y = document.documentElement.scrollTop;
             }
             else if (typeof document.body != 'undefined') {
                 point.x = document.body.scrollLeft;
                 point.y = document.body.scrollTop;
             }
             point.x += ev.clientX;
             point.y += ev.clientY;
             return point;
         }
         function SetPaint(page, object, b_Paint) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             if (typeof b_Paint == 'undefined')
                 return curObject.getPaint();
             else curObject.setPaint(b_Paint);
             if (b_Paint == 1)
              {
                 initdrawsmooth(page, object);
             }
         }
         function SetFontStyle(page, object, style, valid) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             style = style.toUpperCase();
             var k = 'normal';
             if (style == "R" || style == "")
                 k = 'normal';
             else if (style == "B")
                 k = 'bold';
             else if (style == "I")
                 k = 'italic';
             else if (style == "BI")
                 k = "Bold Italic";
             else if (style == "U")
                 k = "Underline";
             else if (style == "S")
                 k = "Strikeout";
             else k = "normal;"
             curObject.setFontStyle(k);
             if (typeof valid != 'undefined')
                 InvalidateObj("", "");
         }

         function SetShowObject(page, object, text) {
             var curObject = null;
             if (object === "") {
                 curObject = m_pgObjCaller;
             }
             else {
                 curObject = FindShape(page, object);
             }
             if (curObject == null) return;
             if (text == 1 || text == true) {
                 curObject.show();
                 curentPage.draw();
             }
             else {
                 curObject.hide();
                 while (curentPage.nodeType != 'Layer')// is Group
                     curentPage = curentPage.parent;
                 curentPage.draw();
             }
         }
         var myArray = new Array();
         function SetVar(key, value) {
             myArray[key] = value;
         }
         function SetRect(page, object, left, top, width, height, inval) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             if (left != -1)
                 curObject.x(left);
             if (top != -1)
                 curObject.y(top);
             if (width != -1)
                 curObject.width(width);
             if (height != -1)
                 curObject.height(height);
             if (typeof inval != "undefined")
                 curentPage.draw();
         }
         function LineHeight(page, object, h) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             if (arguments.length < 3)
                 return curObject.lineHeight();
             else curObject.lineHeight(h);
         }
         function SetScriptPage(pageName, script, ivent) {
         }
         function UTF8Upper(str) {
             return String(str).toUpperCase();
         }
         function UTF8Lower(str) {
             return String(str).toLowerCase();
         }
         function toLowerCase(str) {
             return String(str).toLowerCase();
         }
         function toUpperCase(str) {
             return String(str).toUpperCase();
         }
         function getColorValues(color) {
             var values = { red: null, green: null, blue: null, alpha: 1 };
             if (typeof color == 'string') {
                 /* hex */
                 if (color.indexOf('#') === 0) {
                     color = color.substr(1)
                     if (color.length == 3)
                         values = {
                             red: parseInt(color[0] + color[0], 16) || 0,
                             green: parseInt(color[1] + color[1], 16) || 0,
                             blue: parseInt(color[2] + color[2], 16) || 0,
                             alpha: 1
                         }
                     else
                         values = {
                             red: parseInt(color.substr(0, 2), 16) || 0,
                             green: parseInt(color.substr(2, 2), 16) || 0,
                             blue: parseInt(color.substr(4, 2), 16) || 0,
                             alpha: 1
                         }
                     /* rgb */
                 } else if (color.indexOf('rgb(') === 0) {
                     var pars = color.indexOf(',');
                     values = {
                         red: parseInt(color.substr(4, pars)),
                         green: parseInt(color.substr(pars + 1, color.indexOf(',', pars))),
                         blue: parseInt(color.substr(color.indexOf(',', pars + 1) + 1, color.indexOf(')'))),
                         alpha: 1
                     }
                     /* rgba */
                 } else if (color.indexOf('rgba(') === 0) {
                     pars = color.indexOf(','),
				repars = color.indexOf(',', pars + 1);
                     values = {
                         red: parseInt(color.substr(5, pars)),
                         green: parseInt(color.substr(pars + 1, repars)),
                         blue: parseInt(color.substr(color.indexOf(',', pars + 1) + 1, color.indexOf(',', repars))),
                         alpha: parseFloat(color.substr(color.indexOf(',', repars + 1) + 1, color.indexOf(')')))
                     }
                     /* verbous */
                 } else {
                     if (stdCol[color] != undefined)
                         values = getColorValues(stdCol[color]);
                 }
             }
             values = "rgba(" + values.red + "," + values.green + "," + values.blue + "," + values.alpha + ")";
             return values;
         }
         function ShowColor(page, object) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
         }
         function ShowFont(page, object) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
         }
         function SetFlash() {

         }
         function StopAction() { }
         function StopRecord(id, file) { }
         function Transparent(page, object, trans, state) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             if (typeof trans == 'undefined') {
                 return curObject.opacity();
             }
             else curObject.opacity(trans / 255);
         }
         function UTF8ToVietNam(str) {

             return str;

         }
         function SetFocusObj(objName) {
             var curObject = FindShape("", objName);
             m_pgObjCaller = curObject;
         }
         function abs(d) {
             return Math.abs(d);
         }
         function pow(dx, dy) {
             return Math.pow(dx, dy);
         }
         //Math
        String.prototype.replaceAll = function (strTarget, strSubString) {
             var strText = this;
             var intIndexOfMatch = strText.indexOf(strTarget);
             while (intIndexOfMatch != -1) {
                 strText = strText.replace(strTarget, strSubString)
                 intIndexOfMatch = strText.indexOf(strTarget);
             }
             return (strText);
         }
         function replaceStr(myString, oldpath, newpath, pos, count) {
             if ((typeof myString == 'undefined') || (myString == null))
                 return "";
             if ((typeof pos != 'undefined') || (pos != null))
              {
                 if ((typeof count == 'undefined') || (count == null))
                     count = 1;
                 myString = myString.toString();
                 var strText = myString;
                 var resTring = myString.substring(pos);
                 var intIndexOfMatch = resTring.indexOf(oldpath);
                 var m_count = 0;
                 while (intIndexOfMatch != -1 && m_count < count) {
                     strText = resTring.replace(oldpath, newpath)
                     intIndexOfMatch = strText.indexOf(oldpath);
                     m_count++;
                 }
                 return strText;
             } else
                 return myString.toString().replaceAll(oldpath, newpath);
         }
         //
         function rightStr(str, n) {
             var output;
             if (n <= 0)
                 return "";
             else if (n > String(str).length)
                 output = str;
             else {
                 var iLen = String(str).length;
                 output = String(str).substring(iLen, iLen - n);
             }
             if (output == "") return output;
             if (!isNaN(output))
                 return parseInt(output);
             else return output;
         }
         function leftStr(str, n) {
             var re = "";
             if (n <= 0)
                 return re;
             else if (n > String(str).length)
                 re = str;
             else {
                 var iLen = String(str).length;
                 re = String(str).substring(0, n);
             }
             if (re == "") return re;
             if (!isNaN(re))
                 return parseInt(re);
             else return re;
         }
         function formatNumber(profits, count) {
             return profits.toFixed(count);
         }
       
         function min(a, b) {
             return Math.min(a, b);
         }
         function max(a, b) {
             return Math.max(a, b);
         }
         function ceil(a_nu) {
             return Math.ceil(a_nu);
         }
         function floor(a_nu) {
             return Math.floor(a_nu);
         }
         function sin(a_nu) {
             return Math.sin(a_nu);
         }
         function round(a_) {
             return Math.round(a_);
         }
         function sqrt(a_) {
             return Math.sqrt(a_);
         }
         function wordCountStr(str) {
             str = str.replace(/(^\s*)|(\s*$)/gi, "");
             str = str.replace(/[ ]{2,}/gi, " ");
             str = str.replace(/\n /, "\n");
             str = str.split(' ');
             return str.length;
         }

         function ltrimStr(s, m_char) {
             var x_char = ' ';
             if (typeof m_char != 'undefined')
                 x_char = m_char;
             var l = 0;
             while (l < s.length && s[l] == x_char)
             { l++; }
             return s.substring(l, s.length);
         }
         function rtrimStr(s, m_char) {
             var x_char = ' ';
             if (typeof m_char != 'undefined')
                 x_char = m_char;
             var r = s.length - 1;
             while (r > 0 && s[r] == m_char)
             { r -= 1; }
             return s.substring(0, r + 1);
         }
         function trimStr(str, m_char) {
             if ((typeof m_char == 'undefined') || (m_char == null))
                 return str.toString().trim();
             else {
                 return rtrimStr(ltrimStr(str, m_char), m_char);
             }
         }
         function LoaiBoDau(str) {
             str = str.replace(/à|á|ạ|ả|ã/g, "a");
             str = str.replace(/ầ|ấ|ậ|ẩ|ẫ/g, "â");
             str = str.replace(/ằ|ắ|ặ|ẳ|ẵ/g, "ă");
             str = str.replace(/è|é|ẹ|ẻ|ẽ/g, "e");
             str = str.replace(/ề|ế|ệ|ể|ễ/g, "ê");
             str = str.replace(/ù|ú|ụ|ủ|ũ/g, "u");
             str = str.replace(/ừ|ứ|ự|ử|ữ/g, "ư");
             str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
             str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
             str = str.replace(/ò|ó|ọ|ỏ|õ/g, "o");
             str = str.replace(/ồ|ố|ộ|ổ|ỗ/g, "ô");
             str = str.replace(/ờ|ớ|ợ|ở|ỡ/g, "ơ");
             return str;
         }

         function wordsStr(str, start, count) {
             var result = str.split(/[, ]+/);
             if (result.length < count) count = result.length;
             var index = start - 1;
             var value = "";
             for (var k = 0; k < count; k++) {
                 value = value + result[index] + " ";
                 index = index + 1;
             }
             value = value.trim();
             if (!isNaN(value))
                 return parseInt(value);
             else return value;
         }
         function indexOf(stringstr, pattern, i_start, ignoreCase) {
             if (typeof ignoreCase != 'undefined' && ignoreCase > 0)
                 return stringstr.toLowerCase().indexOf(pattern.toLowerCase(), i_start);
             else return stringstr.indexOf(pattern, i_start);
         }
         function subString(object, pos, count, pad) {
             var re = "";
             object = object.toString();
             if (typeof count == 'undefined')
                 re= object.substr(pos);
             re = object.substr(pos, count);
             if (re == "") return re;
             if (!isNaN(re)) {
                 var s = parseInt(re);
                 if (isNaN(s))// the empty string, string with spaces
                     return re;
                 else return s;
             }
             else return re;
         }
         function length(object) {
             var xx = String(object);
             return xx.length;
         }
         function Length(object) {
             return length(object);
         }
         function setTimeoutFunction(code, millisec) {
             setTimeout(code, millisec);
         }
         function ShapeType(page, object, m_shape) {
             var curObject = FindShape(page, object);
             if (curObject == null) return;
             if (typeof m_shape === 'undefined') {
                 return curObject.attrs.shapeType;
             }
             else curObject.attrs.shapeType = m_shape;
         }
         function AddObjToCurentPage(objstring) {
             var objGet = null;
             var layers = stage.children;
             for (var n = 0; n < layers.length; n++) {
                 var obj = FindShape(layers[n].getName(), objstring);
                 if (obj) {
                     objGet = obj.clone();
                     obj.remove();
                     break;
                 }
             }
             if (objGet != null)
                 m_pgObjCaller.parent.add(objGet);
         }
         function StringtoNumber(str, radix) {
             var l = 0;
             var x_char = '';
             var b_ex = true;
             while (l < str.length && b_ex) 
             {
                 if (!isNaN(str[l])) {
                     x_char = x_char + str[l];
                 } else if (x_char != '')
                     b_ex = false;
                    l++; 
             }
            return Number(x_char);
         }
         function Hour() {
             d = new Date();
             return d.getHours();
         }
         function Mimute() {
             d = new Date();
             return d.getMinutes();
         }
         function Second() {
             d = new Date();
             return d.getSeconds();
         }
         function Day() {
             d = new Date();
             return d.getDate();
         }
         function Month() {
             d = new Date();
             return d.getMonth();
         }
         function Year() {
             d = new Date();
             return d.getFullYear();
         }
         function Name(oldName, newName) {
             var curObject = FindShape("", oldName);
             if (curObject == null) return null;
             else if (typeof newName == 'undefined')
                 return curObject.name();
             else curObject.name(newName);
         }